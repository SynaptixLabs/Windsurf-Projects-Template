#!/usr/bin/env python3
"""
Ruff Code Quality Helper
Provides convenient commands for code quality checks and fixes.
"""

import subprocess
import sys
import argparse
from pathlib import Path

def run_command(cmd, check=True):
    """Run a command and handle errors"""
    try:
        print(f"Running: {cmd}")
        result = subprocess.run(cmd, shell=True, check=check, capture_output=True, text=True)
        if result.stdout:
            print(result.stdout)
        if result.stderr and not check:
            print(result.stderr)
        return result.returncode == 0
    except subprocess.CalledProcessError as e:
        print(f"Error: {e.stderr}")
        return False

def check_code(path=".", fix=False):
    """Check code with Ruff"""
    cmd = f"ruff check {path}"
    if fix:
        cmd += " --fix"
    
    print(f"{'Checking and fixing' if fix else 'Checking'} code quality...")
    return run_command(cmd, check=False)

def format_code(path=".", check_only=False):
    """Format code with Ruff"""
    cmd = f"ruff format {path}"
    if check_only:
        cmd += " --check"
    
    print(f"{'Checking' if check_only else 'Formatting'} code style...")
    return run_command(cmd, check=False)

def check_all(path=".", fix=False):
    """Run all checks and optionally fix issues"""
    print("Running comprehensive code quality checks...")
    
    # Check linting
    lint_ok = check_code(path, fix=fix)
    
    # Check formatting
    format_ok = format_code(path, check_only=not fix)
    
    if lint_ok and format_ok:
        print("✅ All checks passed!")
        return True
    else:
        print("❌ Some checks failed.")
        return False

def show_rules():
    """Show available Ruff rules"""
    print("Showing Ruff rules...")
    return run_command("ruff linter")

def show_config():
    """Show current Ruff configuration"""
    print("Current Ruff configuration:")
    return run_command("ruff config")

def main():
    """Main CLI interface"""
    parser = argparse.ArgumentParser(description="Ruff Code Quality Helper")
    subparsers = parser.add_subparsers(dest='command', help='Available commands')
    
    # Check command
    check_parser = subparsers.add_parser('check', help='Check code quality')
    check_parser.add_argument('path', nargs='?', default='.', help='Path to check')
    check_parser.add_argument('--fix', action='store_true', help='Fix issues automatically')
    
    # Format command
    format_parser = subparsers.add_parser('format', help='Format code')
    format_parser.add_argument('path', nargs='?', default='.', help='Path to format')
    format_parser.add_argument('--check', action='store_true', help='Check formatting only')
    
    # All command
    all_parser = subparsers.add_parser('all', help='Run all checks')
    all_parser.add_argument('path', nargs='?', default='.', help='Path to check')
    all_parser.add_argument('--fix', action='store_true', help='Fix issues automatically')
    
    # Rules command
    subparsers.add_parser('rules', help='Show available rules')
    
    # Config command
    subparsers.add_parser('config', help='Show configuration')
    
    args = parser.parse_args()
    
    if args.command == 'check':
        success = check_code(args.path, args.fix)
    elif args.command == 'format':
        success = format_code(args.path, args.check)
    elif args.command == 'all':
        success = check_all(args.path, args.fix)
    elif args.command == 'rules':
        success = show_rules()
    elif args.command == 'config':
        success = show_config()
    else:
        parser.print_help()
        success = False
    
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()
