# --- Windsurf Metadata ---
# Assistant: Cascade
# Created: 2025-06-30
# --- End Windsurf Metadata ---

from fastapi import APIRouter, Depends, HTTPException, status
from fastapi.security import OAuth2PasswordRequestForm
from sqlalchemy.ext.asyncio import AsyncSession

from {{project_slug}}.dependencies.database import get_db_session
from {{project_slug}}.services.user_service import UserService
from {{project_slug}}.schemas.token import Token
from {{project_slug}}.security.token import create_access_token

router = APIRouter()

@router.post("/login", response_model=Token)
async def login_for_access_token(
    form_data: OAuth2PasswordRequestForm = Depends(), 
    db: AsyncSession = Depends(get_db_session)
):
    """Authenticate user and return a JWT token."""
    user_service = UserService(db)
    user = await user_service.authenticate_user(form_data.username, form_data.password)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    access_token = create_access_token(data={"sub": user.email})
    return {"access_token": access_token, "token_type": "bearer"}
