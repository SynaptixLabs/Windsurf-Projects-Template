# --- Windsurf Metadata ---
# Assistant: Cascade
# Created: 2025-06-30
# --- End Windsurf Metadata ---

from fastapi import APIRouter, Depends
import psutil
import time

from {{project_slug}}.schemas.health import HealthResponse, DetailedHealthResponse
from {{project_slug}}.dependencies.database import get_db_session
from sqlalchemy.ext.asyncio import AsyncSession

router = APIRouter()
_start_time = time.time()

@router.get("/", response_model=HealthResponse)
async def health_check():
    """Basic health check."""
    return {
        "status": "healthy",
        "uptime": time.time() - _start_time,
    }

@router.get("/detailed", response_model=DetailedHealthResponse)
async def detailed_health_check(db: AsyncSession = Depends(get_db_session)):
    """Detailed health check including database and system metrics."""
    db_status = "healthy"
    try:
        await db.execute("SELECT 1")
    except Exception:
        db_status = "unhealthy"

    return {
        "status": "healthy",
        "uptime": time.time() - _start_time,
        "services": {
            "database": db_status
        },
        "system": {
            "cpu_percent": psutil.cpu_percent(),
            "memory_percent": psutil.virtual_memory().percent,
        }
    }
