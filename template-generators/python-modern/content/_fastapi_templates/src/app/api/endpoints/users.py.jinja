# --- Windsurf Metadata ---
# Assistant: Cascade
# Created: 2025-06-30
# --- End Windsurf Metadata ---

from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from typing import List

from {{project_slug}}.dependencies.database import get_db_session
from {{project_slug}}.dependencies.auth import get_current_active_user
from {{project_slug}}.services.user_service import UserService
from {{project_slug}}.schemas.user import UserCreate, UserUpdate, UserResponse
from {{project_slug}}.models.user import User as UserModel

router = APIRouter()

@router.post("/", response_model=UserResponse, status_code=201)
async def create_user(
    user_in: UserCreate, 
    db: AsyncSession = Depends(get_db_session)
):
    """Create a new user."""
    user_service = UserService(db)
    user = await user_service.get_user_by_email(user_in.email)
    if user:
        raise HTTPException(status_code=400, detail="Email already registered")
    return await user_service.create_user(user_in)

@router.get("/me", response_model=UserResponse)
async def read_users_me(current_user: UserModel = Depends(get_current_active_user)):
    """Get current user's profile."""
    return current_user

@router.get("/{user_id}", response_model=UserResponse)
async def read_user(
    user_id: int, 
    db: AsyncSession = Depends(get_db_session),
    current_user: UserModel = Depends(get_current_active_user)
):
    """Get a specific user by ID."""
    user_service = UserService(db)
    user = await user_service.get_user(user_id)
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    return user
