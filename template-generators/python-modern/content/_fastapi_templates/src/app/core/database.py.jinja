# --- Windsurf Metadata ---
# Assistant: Cascade
# Created: 2025-06-30
# --- End Windsurf Metadata ---

from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker
import structlog

from .config import get_settings

logger = structlog.get_logger(__name__)

engine = None
AsyncSessionLocal = None

async def init_db():
    """Initializes the database connection."""
    global engine, AsyncSessionLocal
    settings = get_settings()

    engine = create_async_engine(settings.DATABASE_URL, pool_pre_ping=True)
    AsyncSessionLocal = sessionmaker(
        autocommit=False, autoflush=False, bind=engine, class_=AsyncSession
    )
    logger.info("Database connection initialized.")

async def close_db():
    """Closes the database connection."""
    global engine
    if engine:
        await engine.dispose()
        logger.info("Database connection closed.")
