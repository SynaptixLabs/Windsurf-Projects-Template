# Ruff Integration Guide

## Overview
Ruff is an extremely fast Python linter and code formatter, written in Rust. It can replace multiple tools like Flake8, Black, isort, pyupgrade, and more.

## üåü Key Features
- ‚ö° **Ultra Fast**: 10-100x faster than traditional Python linters
- üîß **All-in-One**: Combines linting, formatting, and import sorting
- üõ†Ô∏è **Auto-Fix**: Automatically fixes many code issues
- üì¶ **Drop-in Replacement**: Compatible with existing tool configurations
- ü¶Ä **Rust-powered**: Exceptional performance and reliability

## üöÄ Quick Start

### 1. Basic Commands
```bash
# Check code quality
ruff check .

# Fix issues automatically
ruff check . --fix

# Format code
ruff format .

# Check formatting without changing files
ruff format . --check
```

### 2. Common Workflows
```bash
# Complete quality check and fix
ruff check . --fix && ruff format .

# Check before committing
ruff check . && ruff format . --check

# Show available rules
ruff linter

# Show current configuration
ruff config
```

## üìö Examples in This Project

### Quality Check Script
```bash
# Check code quality
python scripts/quality_check.py check

# Fix issues automatically
python scripts/quality_check.py check --fix

# Format code
python scripts/quality_check.py format

# Run all checks
python scripts/quality_check.py all --fix
```

### Quick Fix Script
```bash
# One-command fix for entire project
python scripts/quick_fix.py
```

## üîß Configuration

### ruff.toml Configuration
The project includes a comprehensive `ruff.toml` configuration with:

#### Enabled Rule Categories
- **E, W**: pycodestyle errors and warnings
- **F**: Pyflakes (undefined names, unused imports)
- **UP**: pyupgrade (modern Python syntax)
- **B**: flake8-bugbear (common bugs)
- **SIM**: flake8-simplify (code simplification)
- **I**: isort (import sorting)
- **N**: pep8-naming (naming conventions)
- **S**: flake8-bandit (security issues)
- **PT**: flake8-pytest-style (pytest best practices)
- **RET**: flake8-return (return statement improvements)
- **ARG**: flake8-unused-arguments
- **PTH**: flake8-use-pathlib (prefer pathlib)
- **PL**: Pylint rules
- **PERF**: Performance optimizations
- **FURB**: Modern Python patterns

#### Key Settings
```toml
# Line length
line-length = 88

# Target Python version
target-version = "py{{python_version.replace('.', '')}}"

# Import sorting
[lint.isort]
known-first-party = ["{{project_slug}}"]

# Complexity limits
[lint.mccabe]
max-complexity = 10
```

### Per-File Ignores
```toml
[lint.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports
"tests/**/*.py" = ["S101", "PLR2004"]  # Allow asserts and magic values
"scripts/**/*.py" = ["T20"]  # Allow print statements
```

## üèóÔ∏è Integration with Other Tools

### 1. Pre-commit Hooks
Ruff integrates seamlessly with pre-commit:
```yaml
repos:
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.1.9
    hooks:
      - id: ruff
        args: [--fix]
      - id: ruff-format
```

### 2. VS Code Integration
```json
{
  "python.linting.enabled": true,
  "python.linting.ruffEnabled": true,
  "python.formatting.provider": "none",
  "[python]": {
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "charliermarsh.ruff"
  }
}
```

### 3. PyCharm/IntelliJ Integration
1. Install the Ruff plugin
2. Configure in Settings > Tools > Ruff
3. Enable "Run Ruff on save"

### 4. GitHub Actions
```yaml
- name: Run Ruff
  run: |
    pip install ruff
    ruff check --output-format=github .
    ruff format --check .
```

## üîç Rule Categories Explained

### Error Prevention (E, W, F)
```python
# E501: Line too long
x = some_very_long_function_name(arg1, arg2, arg3, arg4)  # Will be flagged

# F401: Unused import
import os  # Will be flagged if unused

# W292: No newline at end of file
print("hello")  # Missing newline at EOF
```

### Modern Python (UP)
```python
# UP007: Use X | Y for type annotations
from typing import Union
def func(x: Union[str, int]):  # Will suggest: def func(x: str | int):
    pass

# UP006: Use list instead of List
from typing import List
def func(items: List[str]):  # Will suggest: def func(items: list[str]):
    pass
```

### Bug Prevention (B)
```python
# B006: Mutable default argument
def func(items=[]):  # Will be flagged
    return items

# Better:
def func(items=None):
    if items is None:
        items = []
    return items
```

### Code Simplification (SIM)
```python
# SIM102: Use a single if-statement
if condition:
    if other_condition:  # Will suggest combining
        do_something()

# Better:
if condition and other_condition:
    do_something()
```

### Security (S)
```python
# S602: subprocess call with shell=True
import subprocess
subprocess.call("ls", shell=True)  # Will be flagged

# Better:
subprocess.call(["ls"])
```

## üéØ Custom Rules and Plugins

### Extending Ruff
```toml
# Add custom rules
[lint]
extend-select = [
    "DJ",     # flake8-django
    "NPY",    # NumPy-specific rules
    "PD",     # pandas-vet
]

# Custom rule configuration
[lint.flake8-quotes]
inline-quotes = "double"
multiline-quotes = "double"
```

### Project-Specific Rules
```toml
# Ignore specific rules for certain patterns
[lint.per-file-ignores]
"migrations/*.py" = ["E501"]  # Long lines OK in migrations
"**/settings.py" = ["S105"]   # Hardcoded passwords OK in settings
```

## üöÄ Performance Tips

### 1. Parallel Processing
```bash
# Ruff automatically uses multiple cores
# No special flags needed for parallel processing
```

### 2. Incremental Checking
```bash
# Check only changed files (Git)
ruff check $(git diff --name-only --diff-filter=AM | grep '\.py$')

# Or use pre-commit for automatic incremental checks
```

### 3. Cache Management
```bash
# Ruff automatically caches results
# Cache location: ~/.cache/ruff (Unix) or %LOCALAPPDATA%\ruff\cache (Windows)

# Clear cache if needed
rm -rf ~/.cache/ruff
```

## üè≠ CI/CD Integration

### GitHub Actions
```yaml
name: Code Quality
on: [push, pull_request]

jobs:
  ruff:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Install Ruff
        run: pip install ruff
      - name: Run Ruff
        run: |
          ruff check --output-format=github .
          ruff format --check .
```

### Pre-commit Integration
```bash
# Install pre-commit hooks
pre-commit install

# Run on all files
pre-commit run --all-files

# Update hook versions
pre-commit autoupdate
```

## üîß Advanced Configuration

### Custom Rule Sets
```toml
# Create rule profiles for different environments
[lint]
select = ["E", "W", "F"]  # Minimal for legacy code

# Or comprehensive for new projects
select = ["ALL"]
ignore = [
    "D",      # Skip docstring rules for now
    "ANN",    # Skip type annotations
]
```
