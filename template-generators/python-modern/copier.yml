# Modern Python Architecture Template Generator (2025)
# FIXED: Simplified choices to prevent generation errors.

_templates_suffix: .jinja
_envops:
  block_start_string: "{%"
  block_end_string: "%}"
  variable_start_string: "{{"
  variable_end_string: "}}"

# Project Basics
project_name:
  type: str
  help: "Project name (e.g., 'My Awesome Project')"
  default: "{{ project_name }}"
  validator: "{% if not project_name %}Project name is required{% endif %}"

project_slug:
  type: str
  help: "Project slug (lowercase, underscores/hyphens allowed)"
  default: "{{ project_name | lower | replace(' ', '-') | replace('_', '-') | regex_replace('^[0-9]', 'py_') }}"
  validator: "{% if not project_slug.replace('-', '').replace('_', '').replace('py_', '').isalnum() %}Use only letters, numbers, hyphens, or underscores{% endif %}"

project_description:
  type: str
  help: "Brief project description"
  default: "Modern Python application with state-of-the-art 2025 tooling"

author_name:
  type: str
  help: "Author name"
  default: "Avidor Rabinovich"

author_email:
  type: str
  help: "Author email"
  default: "avidor@synaptixlabs.ai"

python_version:
  type: str
  help: "Python version"
  default: "3.12"
  choices:
    - "3.11"
    - "3.12"
    - "3.13"

# --- FIXED PRESET SELECTION ---
# Choices are now simple strings to avoid conversion errors.
# The generator logic will need to parse these strings.
complexity_preset:
  type: str
  help: "🎯 Choose your complexity level"
  default: "Intermediate"
  choices:
    - "Beginner"
    - "Intermediate"
    - "Expert"
    - "Custom"
    - "(Admin) Install ALL packages"

integration_focus:
  type: str
  help: "🎯 Primary focus area"
  default: "ai_first"
  when: "{{ complexity_preset != '(Admin) Install ALL packages' }}"
  choices:
    - "ai_first"
    - "web_api"
    - "data_processing"
    - "full_stack"


# --- Template Source --- 
_subdirectory: content

# --- FRAMEWORK CATEGORIES (for custom selection) ---
ai_frameworks:
  type: str
  help: "🤖 AI & Agentic Frameworks"
  multiselect: true
  default: []
  when: "{{ complexity_preset == 'Custom' }}"
  choices:
    - "pydantic_ai"
    - "crew_ai"
    - "langchain"
    - "instructor"
    - "llama_index"

web_frameworks:
  type: str
  help: "🌐 Web Frameworks"
  multiselect: true
  default: []
  when: "{{ complexity_preset == 'Custom' }}"
  choices:
    - "fastapi"
    - "litestar"
    - "robyn"
    - "streamlit"

data_frameworks:
  type: str
  help: "📊 Data Processing"
  multiselect: true
  default: []
  when: "{{ complexity_preset == 'Custom' }}"
  choices:
    - "polars"
    - "duckdb"
    - "pyarrow"
    - "ibis"

performance_tools:
  type: str
  help: "⚡ Performance & Tooling"
  multiselect: true
  default: []
  when: "{{ complexity_preset == 'Custom' }}"
  choices:
    - "uv"
    - "ruff"
    - "orjson"
    - "maturin"

# Database selections
databases:
  type: str
  help: "🗄️ Database backends"
  multiselect: true
  default: []
  when: "{{ complexity_preset == 'Custom' }}"
  choices:
    - "postgresql"
    - "mongodb"
    - "redis"
    - "sqlite"
    - "chromadb"
    - "pinecone"

# Container & Deployment
include_docker:
  type: bool
  help: "🐳 Include Docker configuration?"
  default: true
  when: "{{ complexity_preset != '(Admin) Install ALL packages' }}"

include_github_actions:
  type: bool
  help: "🔄 Include GitHub Actions CI/CD?"
  default: true
  when: "{{ complexity_preset != '(Admin) Install ALL packages' }}"

# GitHub Repository Setup
create_github_repo:
  type: bool
  help: "🐙 Create GitHub repository?"
  default: true

github_private:
  type: bool
  help: "Make repository private?"
  default: true
  when: "{{ False if complexity_preset == '(Admin) Install ALL packages' else create_github_repo }}"

github_org:
  type: str
  help: "GitHub organization [SynaptixLabs]"
  default: "SynaptixLabs"
  when: "{{ False if complexity_preset == '(Admin) Install ALL packages' else create_github_repo }}"

include_pre_commit:
  type: bool
  help: "🎣 Include pre-commit hooks?"
  default: true
  when: "{{ complexity_preset != '(Admin) Install ALL packages' }}"

# Documentation
docs_framework:
  type: str
  help: "📚 Documentation framework"
  default: "mkdocs"
  when: "{{ complexity_preset != '(Admin) Install ALL packages' }}"
  choices:
    - "mkdocs"
    - "sphinx"
    - "both"

# Testing



testing_framework:
  type: str
  help: "🧪 Testing approach"
  default: "comprehensive"
  when: "{{ complexity_preset != '(Admin) Install ALL packages' }}"
  choices:
    - "basic"
    - "comprehensive"
    - "enterprise"

coverage_threshold:
  type: int
  help: "📊 Minimum test coverage percentage"
  default: 85
  when: "{{ complexity_preset != '(Admin) Install ALL packages' }}"
  validator: "{% if coverage_threshold < 0 or coverage_threshold > 100 %}Coverage must be between 0 and 100{% endif %}"

# Sprint Structure
create_sprint_structure:
  type: bool
  help: "📋 Create sprint TODO structure?"
  default: true
  when: "{{ complexity_preset != '(Admin) Install ALL packages' }}"

sprint_count:
  type: int
  help: "📈 Number of sprints to create"
  default: 4
  when: "{{ False if complexity_preset == '(Admin) Install ALL packages' else create_sprint_structure }}"
  validator: "{% if sprint_count < 1 or sprint_count > 10 %}Sprint count must be between 1 and 10{% endif %}"

# Windsurf Integration
include_windsurf:
  type: bool
  help: "🌊 Include Windsurf IDE integration?"
  default: true
  when: "{{ complexity_preset != '(Admin) Install ALL packages' }}"

# Advanced Features
include_observability:
  type: bool
  help: "📊 Include observability stack (logging, metrics, tracing)?"
  default: false
  when: "{{ False if complexity_preset == '(Admin) Install ALL packages' else (complexity_preset in ['Expert', 'Custom']) }}"

include_security:
  type: bool
  help: "🔒 Include security scanning and hardening?"
  default: true
  when: "{{ complexity_preset != '(Admin) Install ALL packages' }}"

# Package Manager
package_manager:
  type: str
  help: "📦 Package manager"
  default: "uv"
  when: "{{ complexity_preset != '(Admin) Install ALL packages' }}"
  choices:
    - "uv"
    - "poetry"
    - "pip"

# Template Configuration
_skip_if_exists:
  - "README.md"
  - ".env"
  - "*.log"
