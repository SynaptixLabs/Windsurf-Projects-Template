# Multi-stage Dockerfile for {{ project_name }}
# Built with modern Python {{ python_version }} and optimized for production

# Build stage
FROM python:{{ python_version }}-slim as builder

# Set build arguments
ARG POETRY_VERSION=1.8.3

# Install system dependencies for building
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Install Poetry
RUN pip install poetry==$POETRY_VERSION

# Configure Poetry
ENV POETRY_NO_INTERACTION=1 \
    POETRY_VENV_IN_PROJECT=1 \
    POETRY_CACHE_DIR=/tmp/poetry_cache

# Set work directory
WORKDIR /app

# Copy Poetry files
COPY pyproject.toml poetry.lock* ./

# Install dependencies
RUN poetry install --only=main --no-root && rm -rf $POETRY_CACHE_DIR

# Production stage
FROM python:{{ python_version }}-slim as production

{% if project_type == "game-development" -%}
# Install system dependencies for Pygame
RUN apt-get update && apt-get install -y \
    libsdl2-dev \
    libsdl2-image-dev \
    libsdl2-mixer-dev \
    libsdl2-ttf-dev \
    libfreetype6-dev \
    libportmidi-dev \
    && rm -rf /var/lib/apt/lists/*
{% else -%}
# Install minimal system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/*
{% endif -%}

# Create non-root user
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PATH="/app/.venv/bin:$PATH"

# Set work directory
WORKDIR /app

# Copy virtual environment from builder stage
COPY --from=builder --chown=appuser:appuser /app/.venv /app/.venv

# Copy application code
COPY --chown=appuser:appuser . .

# Install the application
RUN /app/.venv/bin/pip install -e .

# Create necessary directories
RUN mkdir -p /app/data /app/logs {% if project_type == "game-development" %}/app/saves{% endif %} && \
    chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Health check
{% if project_type == "web-api" or project_type == "agentic-ai" -%}
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Expose port
EXPOSE 8000

# Run the application
CMD ["python", "-m", "{{ project_slug.replace('-', '_') }}.main"]
{% elif project_type == "data-science" -%}
# Data science workload - no health check needed for batch jobs
CMD ["python", "-m", "{{ project_slug.replace('-', '_') }}.main", "--help"]
{% elif project_type == "game-development" -%}
# Game application - typically runs with display
CMD ["python", "-m", "{{ project_slug.replace('-', '_') }}.main"]
{% else -%}
# CLI application
CMD ["python", "-m", "{{ project_slug.replace('-', '_') }}.main", "--help"]
{% endif -%}

# Development stage (optional)
FROM production as development

# Switch back to root for package installation
USER root

# Install development dependencies
RUN apt-get update && apt-get install -y \
    git \
    vim \
    && rm -rf /var/lib/apt/lists/*

# Install development Python packages
COPY --from=builder /app/.venv /app/.venv
RUN /app/.venv/bin/poetry install --with dev

# Switch back to appuser
USER appuser

# Development command with auto-reload
{% if project_type == "web-api" or project_type == "agentic-ai" -%}
CMD ["python", "-m", "{{ project_slug.replace('-', '_') }}.main", "--reload"]
{% else -%}
CMD ["python", "-m", "{{ project_slug.replace('-', '_') }}.main"]
{% endif -%}
