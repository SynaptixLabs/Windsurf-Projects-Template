"""{{ project_name }} - Main application entry point."""

{% if project_type == "web-api" -%}
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

from .api.v1 import routes
from .core.config import settings

app = FastAPI(
    title="{{ project_name }}",
    description="{{ project_description }}",
    version="0.1.0"
)

# Configure CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.ALLOWED_HOSTS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Include routers
app.include_router(routes.router, prefix="/api/v1")


@app.get("/health")
async def health_check():
    """Health check endpoint."""
    return {"status": "healthy", "service": "{{ project_slug }}"}


def main():
    """Run the FastAPI application."""
    import uvicorn
    uvicorn.run(
        "{{ project_slug.replace('-', '_') }}.main:app",
        host="0.0.0.0",
        port=8000,
        reload=True
    )

{% elif project_type == "agentic-ai" -%}
import asyncio
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

from .agents.crew_manager import CrewManager
from .api.v1 import routes
from .core.config import settings

app = FastAPI(
    title="{{ project_name }}",
    description="{{ project_description }}",
    version="0.1.0"
)

# Configure CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.ALLOWED_HOSTS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Include routers
app.include_router(routes.router, prefix="/api/v1")

# Initialize crew manager
crew_manager = CrewManager()


@app.get("/health")
async def health_check():
    """Health check endpoint."""
    return {"status": "healthy", "service": "{{ project_slug }}", "agents": "ready"}


async def run_crew_example():
    """Example of running a crew asynchronously."""
    result = await crew_manager.run_example_crew()
    print(f"Crew result: {result}")


def main():
    """Run the agentic AI application."""
    import uvicorn
    import argparse
    
    parser = argparse.ArgumentParser()
    parser.add_argument("--debug", action="store_true", help="Enable debug mode")
    parser.add_argument("--crew-only", action="store_true", help="Run crew without API server")
    args = parser.parse_args()
    
    if args.crew_only:
        # Run crew example
        asyncio.run(run_crew_example())
    else:
        # Run FastAPI server
        uvicorn.run(
            "{{ project_slug.replace('-', '_') }}.main:app",
            host="0.0.0.0",
            port=8000,
            reload=args.debug
        )

{% elif project_type == "data-science" -%}
"""Data science application entry point."""

import typer
from rich.console import Console
from pathlib import Path

from .data.ingestion import DataIngestionPipeline
from .analysis.base_analysis import AnalysisEngine
from .core.config import settings

app = typer.Typer(help="{{ project_description }}")
console = Console()


@app.command()
def ingest(
    source_path: Path = typer.Argument(..., help="Path to data source"),
    output_path: Path = typer.Option("data/processed", help="Output directory")
):
    """Ingest and process raw data."""
    console.print(f"[blue]Ingesting data from {source_path}...[/blue]")
    
    pipeline = DataIngestionPipeline()
    result = pipeline.run(source_path, output_path)
    
    console.print(f"[green]Processed {result['records']} records[/green]")


@app.command()
def analyze(
    data_path: Path = typer.Argument(..., help="Path to processed data"),
    analysis_type: str = typer.Option("basic", help="Type of analysis to run")
):
    """Run data analysis."""
    console.print(f"[blue]Running {analysis_type} analysis...[/blue]")
    
    engine = AnalysisEngine()
    results = engine.run_analysis(data_path, analysis_type)
    
    console.print(f"[green]Analysis complete. Results: {results}[/green]")


def main():
    """Main CLI entry point."""
    app()

{% elif project_type == "game-development" -%}
"""{{ project_name }} - Game entry point."""

import argparse
import sys
from pathlib import Path

import pygame
from rich.console import Console

from .core.game_engine import GameEngine
from .core.config import GameSettings

console = Console()


def main():
    """Main game entry point."""
    parser = argparse.ArgumentParser(description="{{ project_description }}")
    parser.add_argument("--debug", action="store_true", help="Enable debug mode")
    parser.add_argument("--fullscreen", action="store_true", help="Start in fullscreen")
    parser.add_argument("--resolution", default="800x600", help="Screen resolution (WxH)")
    args = parser.parse_args()
    
    try:
        # Initialize Pygame
        pygame.init()
        console.print("[green]üéÆ Initializing {{ project_name }}...[/green]")
        
        # Parse resolution
        width, height = map(int, args.resolution.split('x'))
        
        # Create game settings
        settings = GameSettings(
            screen_width=width,
            screen_height=height,
            fullscreen=args.fullscreen,
            debug_mode=args.debug
        )
        
        # Create and run game
        game = GameEngine(settings)
        console.print("[blue]üöÄ Starting game loop...[/blue]")
        game.run()
        
    except KeyboardInterrupt:
        console.print("\n[yellow]‚èπÔ∏è  Game interrupted by user[/yellow]")
    except Exception as e:
        console.print(f"[red]‚ùå Game error: {e}[/red]")
        if args.debug:
            raise
        sys.exit(1)
    finally:
        pygame.quit()
        console.print("[green]üëã Game shutdown complete[/green]")

{% else -%}
"""{{ project_name }} - CLI application entry point."""

import typer
from rich.console import Console

from .core.config import settings

app = typer.Typer(help="{{ project_description }}")
console = Console()


@app.command()
def hello(name: str = typer.Argument("World", help="Name to greet")):
    """Say hello to someone."""
    console.print(f"[green]Hello {name}![/green]")


@app.command()
def version():
    """Show version information."""
    console.print(f"[blue]{{ project_name }} v0.1.0[/blue]")


def main():
    """Main CLI entry point."""
    app()
{% endif -%}


if __name__ == "__main__":
    main()
