"""Core configuration and settings for {{ project_name }}."""

from functools import lru_cache
from pathlib import Path
from typing import List, Optional

from pydantic import Field
from pydantic_settings import BaseSettings, SettingsConfigDict


class Settings(BaseSettings):
    """Application settings."""
    
    model_config = SettingsConfigDict(
        env_file=".env",
        env_file_encoding="utf-8",
        case_sensitive=False,
        extra="ignore"
    )
    
    # Basic application settings
    app_name: str = "{{ project_name }}"
    version: str = "0.1.0"
    debug: bool = Field(default=False, description="Enable debug mode")
    
    {% if project_type == "web-api" or project_type == "agentic-ai" -%}
    # API settings
    api_host: str = Field(default="0.0.0.0", description="API host")
    api_port: int = Field(default=8000, description="API port")
    allowed_hosts: List[str] = Field(default=["*"], description="CORS allowed hosts")
    
    {% if "postgresql" in databases -%}
    # PostgreSQL settings
    postgres_host: str = Field(default="localhost", description="PostgreSQL host")
    postgres_port: int = Field(default=5432, description="PostgreSQL port")
    postgres_user: str = Field(default="postgres", description="PostgreSQL user")
    postgres_password: str = Field(default="", description="PostgreSQL password")
    postgres_db: str = Field(default="{{ project_slug.replace('-', '_') }}", description="PostgreSQL database")
    
    @property
    def postgres_url(self) -> str:
        """Get PostgreSQL connection URL."""
        return f"postgresql+asyncpg://{self.postgres_user}:{self.postgres_password}@{self.postgres_host}:{self.postgres_port}/{self.postgres_db}"
    {% endif -%}
    
    {% if "mongodb" in databases -%}
    # MongoDB settings
    mongodb_url: str = Field(default="mongodb://localhost:27017", description="MongoDB URL")
    mongodb_db: str = Field(default="{{ project_slug.replace('-', '_') }}", description="MongoDB database")
    {% endif -%}
    
    {% if "redis" in databases -%}
    # Redis settings
    redis_host: str = Field(default="localhost", description="Redis host")
    redis_port: int = Field(default=6379, description="Redis port")
    redis_db: int = Field(default=0, description="Redis database")
    redis_password: Optional[str] = Field(default=None, description="Redis password")
    
    @property
    def redis_url(self) -> str:
        """Get Redis connection URL."""
        if self.redis_password:
            return f"redis://:{self.redis_password}@{self.redis_host}:{self.redis_port}/{self.redis_db}"
        return f"redis://{self.redis_host}:{self.redis_port}/{self.redis_db}"
    {% endif -%}
    
    {% if "chromadb" in databases -%}
    # ChromaDB settings
    chroma_host: str = Field(default="localhost", description="ChromaDB host")
    chroma_port: int = Field(default=8000, description="ChromaDB port")
    chroma_collection: str = Field(default="{{ project_slug.replace('-', '_') }}_embeddings", description="ChromaDB collection")
    {% endif -%}
    
    {% if "pinecone" in databases -%}
    # Pinecone settings
    pinecone_api_key: Optional[str] = Field(default=None, description="Pinecone API key")
    pinecone_environment: str = Field(default="us-west1-gcp", description="Pinecone environment")
    pinecone_index: str = Field(default="{{ project_slug.replace('-', '_') }}", description="Pinecone index name")
    {% endif -%}
    
    {% endif -%}
    
    {% if project_type == "agentic-ai" -%}
    # CrewAI settings
    openai_api_key: Optional[str] = Field(default=None, description="OpenAI API key")
    anthropic_api_key: Optional[str] = Field(default=None, description="Anthropic API key")
    crew_verbose: bool = Field(default=True, description="Enable verbose crew logging")
    crew_memory: bool = Field(default=True, description="Enable crew memory")
    
    {% endif -%}
    
    {% if project_type == "data-science" -%}
    # Data science settings
    data_dir: Path = Field(default=Path("data"), description="Data directory")
    output_dir: Path = Field(default=Path("output"), description="Output directory")
    batch_size: int = Field(default=1000, description="Processing batch size")
    max_workers: int = Field(default=4, description="Maximum worker threads")
    
    {% if orchestration_tool == "prefect" -%}
    # Prefect settings
    prefect_api_url: Optional[str] = Field(default=None, description="Prefect API URL")
    {% elif orchestration_tool == "airflow" -%}
    # Airflow settings
    airflow_home: Path = Field(default=Path("airflow"), description="Airflow home directory")
    {% endif -%}
    
    {% endif -%}
    
    {% if project_type == "game-development" -%}
    # Game settings
    screen_width: int = Field(default=800, description="Screen width")
    screen_height: int = Field(default=600, description="Screen height")
    fps: int = Field(default=60, description="Target FPS")
    fullscreen: bool = Field(default=False, description="Start in fullscreen")
    
    # Game directories
    assets_dir: Path = Field(default=Path("assets"), description="Game assets directory")
    saves_dir: Path = Field(default=Path("saves"), description="Game saves directory")
    
    {% endif -%}
    
    # Logging settings
    log_level: str = Field(default="INFO", description="Logging level")
    log_format: str = Field(default="json", description="Log format (json|console)")
    
    # Development settings
    hot_reload: bool = Field(default=False, description="Enable hot reload in development")
    profiling: bool = Field(default=False, description="Enable performance profiling")


{% if project_type == "game-development" -%}
class GameSettings(Settings):
    """Game-specific settings with additional validation."""
    
    def __post_init__(self):
        """Post-initialization validation."""
        # Ensure assets directory exists
        self.assets_dir.mkdir(exist_ok=True)
        self.saves_dir.mkdir(exist_ok=True)
        
        # Validate FPS
        if self.fps <= 0 or self.fps > 240:
            raise ValueError("FPS must be between 1 and 240")
        
        # Validate screen dimensions
        if self.screen_width < 320 or self.screen_height < 240:
            raise ValueError("Screen dimensions too small (minimum 320x240)")


@lru_cache()
def get_game_settings() -> GameSettings:
    """Get cached game settings instance."""
    return GameSettings()

{% endif -%}


@lru_cache()
def get_settings() -> Settings:
    """Get cached settings instance."""
    return Settings()


# Convenience access
settings = get_settings()
