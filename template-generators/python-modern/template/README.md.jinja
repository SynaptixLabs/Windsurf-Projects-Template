# {{ project_name }}

{{ project_description }}

## Features

{% if project_type == "web-api" -%}
- **FastAPI** - High-performance async web framework
- **Pydantic v2** - Data validation and settings management
- **Auto-generated OpenAPI** - Interactive API documentation
{% if include_auth -%}
- **Authentication** - JWT-based authentication system
{% endif -%}
{% if databases -%}
- **Database Integration** - {{ databases | join(', ') }}
{% endif -%}

{% elif project_type == "agentic-ai" -%}
- **CrewAI** - Multi-agent collaboration framework
- **Role-based Agents** - Specialized AI agents with defined roles
{% if "tools" in crewai_features -%}
- **Custom Tools** - Extensible tool integration system
{% endif -%}
{% if "memory" in crewai_features -%}
- **Memory Management** - Short-term, long-term, and entity memory
{% endif -%}
- **FastAPI Integration** - RESTful API for external access
{% if databases -%}
- **Vector Databases** - {{ databases | join(', ') }} for embeddings
{% endif -%}

{% elif project_type == "data-science" -%}
- **Polars** - High-performance data processing (5-10x faster than Pandas)
- **DuckDB** - Analytical SQL engine for complex queries
- **{{ orchestration_tool | title }}** - Workflow orchestration and scheduling
{% if include_notebooks -%}
- **Jupyter Notebooks** - Interactive data analysis
{% endif -%}
- **PyArrow** - Efficient columnar data processing

{% elif project_type == "game-development" -%}
- **Pygame** - 2D game engine with graphics and sound
- **60 FPS Performance** - Optimized game loop and rendering
- **State Management** - Clean game state with Pydantic models
- **Event Handling** - Responsive user input system
{% if include_assets -%}
- **Sample Assets** - Starter graphics and sound effects
{% endif -%}

{% endif -%}

## Modern Python Stack (2025)

- **Python {{ python_version }}** - Latest stable Python
- **Ruff** - Ultra-fast linting and formatting (10-100x faster than alternatives)
- **MyPy** - Strict type checking
- **pytest** - Comprehensive testing with {{ coverage_threshold }}% coverage
{% if testing_framework == "comprehensive" or testing_framework == "enterprise" -%}
- **Hypothesis** - Property-based testing
- **testcontainers** - Integration testing with real services
{% endif -%}
{% if package_manager == "uv" -%}
- **UV** - Ultra-fast dependency resolution (80x faster than pip)
{% else -%}
- **Poetry** - Dependency management and packaging
{% endif -%}

## Quick Start

### Prerequisites

- Python {{ python_version }}+
{% if package_manager == "poetry" -%}
- Poetry 1.8+
{% else -%}
- UV package manager
{% endif -%}

### Installation

{% if package_manager == "poetry" -%}
```bash
# Clone the repository
git clone <repository-url>
cd {{ project_slug }}

# Install dependencies
poetry install

# Activate virtual environment
poetry shell
```
{% else -%}
```bash
# Clone the repository
git clone <repository-url>
cd {{ project_slug }}

# Create virtual environment and install dependencies
uv venv
uv pip install -e .
source .venv/bin/activate  # On Windows: .venv\Scripts\activate
```
{% endif -%}

### Development Setup

{% if include_pre_commit -%}
```bash
# Install pre-commit hooks
pre-commit install

# Run pre-commit on all files (optional)
pre-commit run --all-files
```
{% endif -%}

### Running the Application

```bash
# Run the application
{{ package_manager }} run {{ project_slug.replace("-", "_") }}

# Development mode with auto-reload
{{ package_manager }} run dev

# Run tests
{{ package_manager }} run test

# Run full CI pipeline locally
{{ package_manager }} run ci
```

{% if project_type == "web-api" or project_type == "agentic-ai" -%}
### API Documentation

Once the application is running, visit:
- **Interactive API docs**: http://localhost:8000/docs
- **ReDoc documentation**: http://localhost:8000/redoc

{% endif -%}

## Development

### Code Quality

This project uses modern Python tooling for code quality:

```bash
# Linting and formatting
{{ package_manager }} run lint
{{ package_manager }} run format

# Type checking
mypy src/

# Security scanning{% if testing_framework == "enterprise" %}
bandit -r src/
safety check{% endif %}
```

### Testing

```bash
# Run all tests
{{ package_manager }} run test

# Run with coverage report
pytest --cov=src --cov-report=html

# Run specific test categories
pytest -m unit          # Unit tests only
pytest -m integration   # Integration tests only
{% if testing_framework == "comprehensive" or testing_framework == "enterprise" -%}
pytest -m "not slow"    # Skip slow tests
{% endif -%}

# Parallel test execution
pytest -n auto
```

{% if testing_framework == "comprehensive" or testing_framework == "enterprise" -%}
### Performance Testing

```bash
# Benchmark critical functions
pytest tests/performance/ --benchmark-only

# Property-based testing
pytest tests/property/ -v
```
{% endif -%}

### Project Structure

```
{{ project_slug }}/
├── src/{{ project_slug.replace('-', '_') }}/     # Source code
│   ├── core/                     # Core business logic
│   ├── models/                   # Pydantic data models
{% if project_type == "web-api" or project_type == "agentic-ai" -%}
│   ├── api/                      # FastAPI routes
{% endif -%}
{% if project_type == "agentic-ai" -%}
│   ├── agents/                   # CrewAI agents
│   ├── tools/                    # Custom tools
{% endif -%}
{% if project_type == "data-science" -%}
│   ├── data/                     # Data processing
│   ├── analysis/                 # Analysis modules
│   ├── pipelines/                # Workflows
{% endif -%}
{% if project_type == "game-development" -%}
│   ├── game/                     # Game logic
│   ├── ui/                       # User interface
{% endif -%}
│   ├── utils/                    # Utilities
│   └── main.py                   # Entry point
├── tests/                        # Test suite
│   ├── unit/                     # Unit tests
│   ├── integration/              # Integration tests
│   └── performance/              # Performance tests
├── scripts/                      # Development scripts
{% if include_docs -%}
├── docs/                         # Documentation
{% endif -%}
{% if include_docker -%}
├── Dockerfile                    # Container definition
├── docker-compose.yml           # Local development
{% endif -%}
└── pyproject.toml               # Project configuration
```

{% if include_docker -%}
## Docker

```bash
# Build image
docker build -t {{ project_slug }} .

# Run container
docker run -p 8000:8000 {{ project_slug }}

# Development with docker-compose
docker-compose up --build
```
{% endif -%}

## Contributing

1. Fork the repository
2. Create a feature branch (`git checkout -b feature/amazing-feature`)
3. Make your changes
4. Run the test suite (`{{ package_manager }} run ci`)
5. Commit your changes (`git commit -m 'Add amazing feature'`)
6. Push to the branch (`git push origin feature/amazing-feature`)
7. Open a Pull Request

{% if include_pre_commit -%}
### Code Standards

- All code must pass Ruff linting and formatting
- MyPy type checking must pass with strict mode
- Test coverage must be ≥{{ coverage_threshold }}%
- All commits must pass pre-commit hooks
{% endif -%}

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## Acknowledgments

- Built with the modern Python stack (2025)
- Uses Ruff for 10-100x faster code quality tools
{% if package_manager == "uv" -%}
- Powered by UV for ultra-fast dependency management
{% endif -%}
- Follows the src layout pattern for better project organization
