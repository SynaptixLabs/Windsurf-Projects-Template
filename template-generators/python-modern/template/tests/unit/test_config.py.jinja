"""Tests for core configuration."""

import pytest
from {{ project_slug.replace('-', '_') }}.core.config import get_settings{% if project_type == "game-development" %}, get_game_settings{% endif %}


def test_settings_creation():
    """Test that settings can be created successfully."""
    settings = get_settings()
    assert settings.app_name == "{{ project_name }}"
    assert settings.version == "0.1.0"


def test_settings_singleton():
    """Test that settings is a singleton."""
    settings1 = get_settings()
    settings2 = get_settings()
    assert settings1 is settings2


{% if project_type == "web-api" or project_type == "agentic-ai" -%}
def test_api_settings():
    """Test API-specific settings."""
    settings = get_settings()
    assert settings.api_host == "0.0.0.0"
    assert settings.api_port == 8000
    assert isinstance(settings.allowed_hosts, list)

{% endif -%}

{% if project_type == "game-development" -%}
def test_game_settings():
    """Test game-specific settings."""
    settings = get_game_settings()
    assert settings.screen_width > 0
    assert settings.screen_height > 0
    assert settings.fps > 0
    assert settings.fps <= 240


def test_game_settings_validation():
    """Test game settings validation."""
    from {{ project_slug.replace('-', '_') }}.core.config import GameSettings
    
    # Test invalid FPS
    with pytest.raises(ValueError, match="FPS must be between"):
        GameSettings(fps=0)
    
    with pytest.raises(ValueError, match="FPS must be between"):
        GameSettings(fps=300)
    
    # Test invalid screen dimensions
    with pytest.raises(ValueError, match="Screen dimensions too small"):
        GameSettings(screen_width=100, screen_height=100)

{% endif -%}

{% if "postgresql" in databases -%}
def test_postgres_url():
    """Test PostgreSQL URL generation."""
    settings = get_settings()
    url = settings.postgres_url
    assert "postgresql+asyncpg://" in url
    assert settings.postgres_host in url
    assert str(settings.postgres_port) in url

{% endif -%}

{% if "redis" in databases -%}
def test_redis_url():
    """Test Redis URL generation."""
    settings = get_settings()
    url = settings.redis_url
    assert "redis://" in url
    assert settings.redis_host in url
    assert str(settings.redis_port) in url

{% endif -%}

def test_debug_mode():
    """Test debug mode setting."""
    settings = get_settings()
    # Default should be False
    assert isinstance(settings.debug, bool)


def test_log_settings():
    """Test logging configuration."""
    settings = get_settings()
    assert settings.log_level in ["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"]
    assert settings.log_format in ["json", "console"]
