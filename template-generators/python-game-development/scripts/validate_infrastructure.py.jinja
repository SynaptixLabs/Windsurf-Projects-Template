#!/usr/bin/env python3
"""
Sprint 0 Infrastructure Validation Script

Quick validation that all development infrastructure is properly set up.
This is the lightweight check for Sprint 0 completion.

Usage: poetry run validate-infrastructure
"""

import subprocess
import sys
from pathlib import Path
from typing import List
import importlib.util


class InfrastructureValidator:
    """Validates that development infrastructure is properly configured."""

    def __init__(self, project_root: Path):
        self.project_root = project_root
        self.checks_passed = 0
        self.checks_total = 0
        self.issues: List[str] = []

    def run_check(self, name: str, check_func) -> bool:
        """Run a validation check and track results."""
        self.checks_total += 1
        print(f"🔍 {name}...", end=" ")

        try:
            success = check_func()
            if success:
                print("✅")
                self.checks_passed += 1
                return True
            else:
                print("❌")
                return False
        except Exception as e:
            print(f"❌ ({e})")
            self.issues.append(f"{name}: {e}")
            return False

    def check_poetry_available(self) -> bool:
        """Check that Poetry is installed and working."""
        try:
            result = subprocess.run(
                ["poetry", "--version"], capture_output=True, text=True, timeout=10
            )
            return result.returncode == 0
        except (
            subprocess.CalledProcessError,
            FileNotFoundError,
            subprocess.TimeoutExpired,
        ):
            return False

    def check_dependencies_installed(self) -> bool:
        """Check that Poetry dependencies are installed."""
        try:
            result = subprocess.run(
                ["poetry", "check"],
                capture_output=True,
                text=True,
                cwd=self.project_root,
                timeout=30,
            )
            return result.returncode == 0
        except (subprocess.CalledProcessError, subprocess.TimeoutExpired):
            return False

    def check_ruff_working(self) -> bool:
        """Check that Ruff linting tool is available."""
        try:
            result = subprocess.run(
                ["poetry", "run", "ruff", "--version"],
                capture_output=True,
                text=True,
                cwd=self.project_root,
                timeout=10,
            )
            return result.returncode == 0
        except (subprocess.CalledProcessError, subprocess.TimeoutExpired):
            return False

    def check_mypy_working(self) -> bool:
        """Check that MyPy type checker is available."""
        try:
            result = subprocess.run(
                ["poetry", "run", "mypy", "--version"],
                capture_output=True,
                text=True,
                cwd=self.project_root,
                timeout=10,
            )
            return result.returncode == 0
        except (subprocess.CalledProcessError, subprocess.TimeoutExpired):
            return False

    def check_pytest_working(self) -> bool:
        """Check that pytest testing framework is available."""
        try:
            result = subprocess.run(
                ["poetry", "run", "pytest", "--version"],
                capture_output=True,
                text=True,
                cwd=self.project_root,
                timeout=10,
            )
            return result.returncode == 0
        except (subprocess.CalledProcessError, subprocess.TimeoutExpired):
            return False

    def check_project_structure(self) -> bool:
        """Check that essential project files exist."""
        required_files = ["pyproject.toml", "README.md", "src", "tests", "scripts"]

        for file_path in required_files:
            if not (self.project_root / file_path).exists():
                self.issues.append(f"Missing required file/directory: {file_path}")
                return False
        return True

    def check_main_module_imports(self) -> bool:
        """Check that main project modules can be imported."""
        test_imports = [
            "{{ project_name | replace('-', '_') }}",
            "{{ project_name | replace('-', '_') }}.config.game_settings",
            "{{ project_name | replace('-', '_') }}.core.constants",
            "{{ project_name | replace('-', '_') }}.core.game_engine",
        ]

        # Add src to path temporarily
        src_path = self.project_root / "src"
        if str(src_path) not in sys.path:
            sys.path.insert(0, str(src_path))

        try:
            for module_name in test_imports:
                try:
                    spec = importlib.util.find_spec(module_name)
                    if spec is None:
                        self.issues.append(f"Cannot find module: {module_name}")
                        return False
                except (ImportError, ModuleNotFoundError) as e:
                    self.issues.append(f"Import error for {module_name}: {e}")
                    return False
            return True
        finally:
            # Clean up path
            if str(src_path) in sys.path:
                sys.path.remove(str(src_path))

    def check_cli_commands_available(self) -> bool:
        """Check that CLI commands are properly configured."""
        # Test that Poetry scripts are installed by checking they exist
        try:
            result = subprocess.run(
                [
                    "poetry",
                    "run",
                    "python",
                    "-c",
                    "import scripts.cli; print('CLI module works')",
                ],
                capture_output=True,
                text=True,
                cwd=self.project_root,
                timeout=10,
            )
            if result.returncode != 0 or "CLI module works" not in result.stdout:
                self.issues.append("CLI module import failed")
                return False

            # Test that individual functions exist
            essential_functions = ["lint", "test", "format_code", "ci"]
            for func_name in essential_functions:
                check_result = subprocess.run(
                    [
                        "poetry",
                        "run",
                        "python",
                        "-c",
                        f"import scripts.cli; hasattr(scripts.cli, '{func_name}')",
                    ],
                    capture_output=True,
                    text=True,
                    cwd=self.project_root,
                    timeout=5,
                )
                if check_result.returncode != 0:
                    self.issues.append(f"CLI function '{func_name}' not available")
                    return False

            return True

        except (
            subprocess.CalledProcessError,
            subprocess.TimeoutExpired,
            FileNotFoundError,
        ):
            self.issues.append(
                "CLI commands validation failed - Poetry scripts not working"
            )
            return False

    def check_basic_linting(self) -> bool:
        """Run basic linting check (no auto-fix)."""
        try:
            subprocess.run(
                ["poetry", "run", "ruff", "check", "--select=F,E", "src/"],
                capture_output=True,
                text=True,
                cwd=self.project_root,
                timeout=30,
            )
            # Return True even if there are style issues, just not syntax errors
            # We only care about F (Pyflakes) and E (syntax errors) here
            return True  # As long as command runs successfully
        except (
            subprocess.CalledProcessError,
            subprocess.TimeoutExpired,
            FileNotFoundError,
        ):
            return False

    def check_basic_imports_test(self) -> bool:
        """Run a minimal test to ensure test infrastructure works."""
        try:
            result = subprocess.run(
                [
                    "poetry",
                    "run",
                    "python",
                    "-c",
                    "import pytest; print('pytest works')",
                ],
                capture_output=True,
                text=True,
                cwd=self.project_root,
                timeout=10,
            )
            return result.returncode == 0 and "pytest works" in result.stdout
        except (
            subprocess.CalledProcessError,
            subprocess.TimeoutExpired,
            FileNotFoundError,
        ):
            return False

    def validate_infrastructure(self) -> bool:
        """Run all infrastructure validation checks."""
        print("🏗️  Sprint 0 Infrastructure Validation")
        print("=" * 50)
        print()

        # Core environment checks
        print("📦 Environment Setup:")
        self.run_check("Poetry available", self.check_poetry_available)
        self.run_check("Dependencies installed", self.check_dependencies_installed)
        self.run_check("Project structure", self.check_project_structure)
        print()

        # Development tools checks
        print("🔧 Development Tools:")
        self.run_check("Ruff linter", self.check_ruff_working)
        self.run_check("MyPy type checker", self.check_mypy_working)
        self.run_check("pytest testing", self.check_pytest_working)
        print()

        # Project functionality checks
        print("🎯 Project Functionality:")
        self.run_check("Module imports", self.check_main_module_imports)
        self.run_check("CLI module structure", self.check_cli_commands_available)
        self.run_check("Basic linting", self.check_basic_linting)
        self.run_check("Test infrastructure", self.check_basic_imports_test)
        print()

        # Results summary
        print("=" * 50)
        success_rate = (self.checks_passed / self.checks_total) * 100

        if self.checks_passed == self.checks_total:
            print("🎉 Sprint 0 Infrastructure: COMPLETE")
            print(f"✅ All {self.checks_total} checks passed")
            print()
            print("🚀 Ready for Sprint 1 Development!")
            print("📝 Next steps:")
            print("   1. Begin Sprint 1 tasks (core game logic)")
            print("   2. Use 'poetry run ci' for comprehensive quality checks")
            print("   3. Use 'poetry run test' for running tests during development")
            return True
        else:
            failed_checks = self.checks_total - self.checks_passed
            print("❌ Sprint 0 Infrastructure: INCOMPLETE")
            print(
                f"📊 {self.checks_passed}/{self.checks_total} checks passed ({success_rate:.1f}%)"
            )
            print(f"🔧 {failed_checks} issue(s) need fixing")
            print()

            if self.issues:
                print("🚨 Issues found:")
                for issue in self.issues:
                    print(f"   • {issue}")
                print()

            print("💡 Suggested fixes:")
            print("   1. Run 'poetry install' to ensure dependencies")
            print("   2. Check 'poetry check' for dependency issues")
            print("   3. Verify you're in the correct project directory")
            print("   4. Review the error messages above")
            return False


def main():
    """Main entry point for infrastructure validation."""
    project_root = Path.cwd()

    # Verify we're in a project directory
    if not (project_root / "pyproject.toml").exists():
        print("❌ Error: No pyproject.toml found in current directory")
        print("💡 Make sure you're in the project root directory")
        sys.exit(1)

    validator = InfrastructureValidator(project_root)
    success = validator.validate_infrastructure()

    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()
