#!/usr/bin/env python3
"""
Sprint Demo Script for {{project_name}}

Provides automated demo capabilities for sprint reviews and showcases.
Supports both interactive gameplay and automated demo sequences.

Usage:
    poetry run demo                 # Interactive demo
    poetry run demo --auto         # Automated demo sequence
    poetry run demo --record       # Record demo for presentation
"""

import sys
import time
import logging
from pathlib import Path
from typing import Optional, List, Dict, Any
{% if game_framework == 'pygame' -%}
import pygame
{% endif -%}

from {{ project_name | replace('-', '_') }}.core.game_engine import GameEngine
from {{ project_name | replace('-', '_') }}.config.game_settings import GameSettings
from {{ project_name | replace('-', '_') }}.core.constants import GameState


class DemoController:
    """Controls demo sequences and recordings for sprint showcases."""

    def __init__(self, config: GameSettings):
        self.config = config
        self.engine: Optional[GameEngine] = None
        self.demo_steps: List[Dict[str, Any]] = []
        self.recording = False
        
    def start_interactive_demo(self) -> int:
        """Start interactive demo for live sprint presentation."""
        print("🎮 Starting Interactive Sprint Demo")
        print("=" * 50)
        print("Controls:")
        {% if game_framework == 'pygame' -%}
        print("  • Use mouse and keyboard to interact")
        print("  • ESC to quit demo")
        {% else -%}
        print("  • Use appropriate controls for your game")
        print("  • Check game documentation for control details")
        {% endif -%}
        print("  • Demonstrate core game mechanics")
        print()
        
        try:
            self.engine = GameEngine(self.config)
            return self.engine.run()
        except Exception as e:
            print(f"Demo error: {e}")
            return 1

    def start_automated_demo(self) -> int:
        """Run automated demo sequence for unattended showcase."""
        print("🤖 Starting Automated Sprint Demo")
        print("=" * 50)
        
        # Generic demo sequence - customize for your game
        demo_sequence = [
            {"action": "start_game", "description": "Initialize game"},
            {"action": "show_menu", "description": "Display main menu"},
            {"action": "start_gameplay", "description": "Begin gameplay demonstration"},
            {"action": "demonstrate_features", "description": "Show key game features"},
            {"action": "show_game_states", "description": "Demonstrate different game states"},
            {"action": "end_demo", "description": "Complete demo sequence"},
        ]
        
        try:
            self.engine = GameEngine(self.config)
            
            for step in demo_sequence:
                print(f"📝 {step['description']}")
                time.sleep(2)  # Pause for visibility
                
                if step["action"] == "demonstrate_features":
                    self._demonstrate_game_features()
                elif step["action"] == "show_game_states":
                    self._demonstrate_game_states()
                    
            print("✅ Automated demo completed successfully")
            return 0
            
        except Exception as e:
            print(f"Automated demo error: {e}")
            return 1

    def _demonstrate_game_features(self) -> None:
        """Demonstrate key game features."""
        print("  → Demonstrating core game features")
        # TODO: Customize this method to show your game's specific features
        # Examples:
        # - Show different game modes
        # - Demonstrate player actions
        # - Display scoring system
        # - Show special effects or animations
        time.sleep(2)

    def _demonstrate_game_states(self) -> None:
        """Demonstrate different game states."""
        print("  → Showing game state transitions")
        # TODO: Customize this method to show your game's state system
        # Examples:
        # - Menu -> Playing -> Paused -> Playing -> Game Over
        # - Different levels or stages
        # - Win/lose conditions
        # - Settings and options
        time.sleep(2)

    def record_demo(self, output_path: Path) -> int:
        """Record demo for later playback or presentation."""
        print(f"📹 Recording Sprint Demo to {output_path}")
        print("=" * 50)
        
        # Note: Actual screen recording would require additional dependencies
        # This provides the framework for recording integration
        
        try:
            print("🔴 Recording started...")
            print("  • Play the game normally")
            print("  • All interactions will be captured")
            {% if game_framework == 'pygame' -%}
            print("  • Press F12 to stop recording")
            {% else -%}
            print("  • Use game's quit mechanism to stop recording")
            {% endif -%}
            
            result = self.start_interactive_demo()
            
            print(f"💾 Demo recording saved to {output_path}")
            return result
            
        except Exception as e:
            print(f"Recording error: {e}")
            return 1

    def create_demo_report(self) -> Dict[str, Any]:
        """Create a demo report with current project status."""
        report = {
            "project_name": "{{project_name}}",
            "demo_timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
            "game_framework": "{{game_framework}}",
            "features_demonstrated": [],
            "current_sprint": self._get_current_sprint(),
            "demo_type": "automated",
            "success": True
        }
        
        # TODO: Add game-specific metrics to the report
        # Examples:
        # - Performance metrics (FPS, memory usage)
        # - Feature completion status
        # - Known issues or limitations
        # - Next sprint objectives
        
        return report

    def _get_current_sprint(self) -> str:
        """Get current sprint information from state.md."""
        try:
            state_file = Path("state.md")
            if state_file.exists():
                content = state_file.read_text()
                for line in content.split('\n'):
                    if 'Current Sprint' in line:
                        return line.split(':')[1].strip()
            return "Unknown"
        except Exception:
            return "Unknown"


def print_sprint_status():
    """Display current sprint status and achievements."""
    print("📊 Sprint Status Overview")
    print("=" * 50)
    
    # Read state from state.md if available
    state_file = Path("state.md")
    if state_file.exists():
        content = state_file.read_text()
        print("Current Project State:")
        
        # Extract key information
        for line in content.split('\n'):
            if 'Sprint' in line and ('✅' in line or '🔄' in line or '⏳' in line):
                print(f"  {line.strip()}")
    else:
        print("  📝 State file not found - run demo for current status")
    
    print()


def print_demo_instructions():
    """Print game-specific demo instructions."""
    print("🎯 Demo Instructions")
    print("=" * 50)
    print("This demo will showcase:")
    
    # TODO: Customize these instructions for your specific game
    instructions = [
        "✨ Core game mechanics and features",
        "🎮 User interface and controls", 
        "🏆 Game progression and objectives",
        "🎨 Visual and audio elements",
        "📊 Current development progress",
    ]
    
    for instruction in instructions:
        print(f"  {instruction}")
    
    print()
    print("💡 Tips for effective demonstrations:")
    print("  • Focus on new features since last sprint")
    print("  • Highlight key achievements and milestones")
    print("  • Show both successful scenarios and edge cases")
    print("  • Be prepared to discuss technical implementation")
    print()


def main() -> int:
    """Main demo entry point."""
    import argparse
    
    parser = argparse.ArgumentParser(description="{{project_name}} Sprint Demo")
    parser.add_argument("--auto", action="store_true", help="Run automated demo sequence")
    parser.add_argument("--record", metavar="OUTPUT", help="Record demo to file")
    parser.add_argument("--status", action="store_true", help="Show sprint status only")
    parser.add_argument("--instructions", action="store_true", help="Show demo instructions")
    
    args = parser.parse_args()
    
    # Always show sprint status first
    print_sprint_status()
    
    if args.status:
        return 0
    
    if args.instructions:
        print_demo_instructions()
        return 0
    
    # Initialize demo controller
    config = GameSettings()
    demo = DemoController(config)
    
    if args.record:
        output_path = Path(args.record)
        return demo.record_demo(output_path)
    elif args.auto:
        return demo.start_automated_demo()
    else:
        return demo.start_interactive_demo()


if __name__ == "__main__":
    sys.exit(main())
