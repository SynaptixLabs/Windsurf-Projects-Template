# scripts/cli.py
"""CLI commands for {{project_name}}."""

import subprocess
import sys
from pathlib import Path


def run():
    """Run the game."""
    subprocess.run([sys.executable, "-m", "{{project_name.replace('-', '_')}}.main"], check=True)


def demo():
    """Run interactive sprint demo."""
    subprocess.run([sys.executable, "scripts/demo.py"], check=True)  # noqa: S603


def demo_auto():
    """Run automated demo sequence."""
    subprocess.run([sys.executable, "scripts/demo.py", "--auto"], check=True)  # noqa: S603


def demo_record():
    """Record demo for presentation."""
    import datetime
    output_file = "demo_{{project_name}}_" + datetime.datetime.now().strftime('%Y%m%d_%H%M%S') + ".mp4"
    subprocess.run([sys.executable, "scripts/demo.py", "--record", output_file], check=True)  # noqa: S603


def sprint_status():
    """Show current sprint status and progress."""
    subprocess.run([sys.executable, "scripts/demo.py", "--status"], check=True)  # noqa: S603


def dev():
    """Start development mode with debug features."""
    print("Starting game in development mode...")
    subprocess.run([
        sys.executable, "-m", "{{project_name.replace('-', '_')}}.main", 
        "--debug"
    ], check=True)


def lint():
    """Run linting checks."""
    subprocess.run(["ruff", "check", "."], check=True)


def test():
    """Run tests with coverage."""
    subprocess.run([
        "pytest", 
        {% if testing_level in ["standard", "comprehensive"] -%}
        "--cov=src/{{project_name.replace('-', '_')}}",
        "--cov-report=term-missing",
        "--cov-report=html"
        {% endif -%}
    ], check=True)


def ci():
    """üî¨ Sprint End + Pre-Commit: Full quality gates (comprehensive validation)."""
    print("Running CI pipeline with smart coverage...")
    print("=" * 60)

    # Standard checks
    try:
        # Linting
        print("üîç Running linting...")
        subprocess.run(["ruff", "check", "."], check=True)  # noqa: S603
        print("‚úÖ Linting passed")
        print()

        # Formatting check
        print("üìê Checking formatting...")
        subprocess.run(["ruff", "format", "--check", "."], check=True)  # noqa: S603
        print("‚úÖ Formatting check passed")
        print()

        # Type checking
        print("üîß Running type checks...")
        subprocess.run(["mypy", "src/"], check=True)  # noqa: S603
        print("‚úÖ Type checking passed")
        print()

    except subprocess.CalledProcessError as e:
        print("‚ùå CI pipeline failed at static analysis stage")
        print(f"   Command failed: {' '.join(e.cmd)}")
        sys.exit(1)

    # Smart coverage analysis
    try:
        from scripts.coverage import SmartCoverageManager

        coverage_mgr = SmartCoverageManager(Path("."))

        # Run smart coverage (non-strict mode for development)
        success = coverage_mgr.run_smart_coverage_check(strict=False)

        if success:
            print("üéâ All CI checks passed with smart coverage!")
        else:
            print("‚ùå Smart coverage checks failed")
            print("üí° See output above for specific recommendations")
            sys.exit(1)

    except ImportError as e:
        print(f"‚ö†Ô∏è  Warning: Could not import smart coverage system: {e}")
        print("üîÑ Falling back to basic coverage check...")

        # Fallback to basic coverage
        try:
            subprocess.run(
                ["pytest", "--cov=src", "--cov-fail-under=60"],
                check=True,
            )  # noqa: S603
            print("‚úÖ Basic coverage check passed")
        except subprocess.CalledProcessError:
            print("‚ùå Coverage check failed")
            sys.exit(1)

    except Exception as e:
        print(f"‚ùå Unexpected error in smart coverage system: {e}")
        print("üîÑ Falling back to basic coverage check...")

        # Fallback to basic coverage
        try:
            subprocess.run(
                ["pytest", "--cov=src", "--cov-fail-under=60"],
                check=True,
            )  # noqa: S603
            print("‚úÖ Basic coverage check passed")
        except subprocess.CalledProcessError:
            print("‚ùå Coverage check failed")
            sys.exit(1)


def format_code():
    """‚ö° Development: Auto-format code (during development)."""
    subprocess.run(["ruff", "format", "."], check=True)  # noqa: S603
    subprocess.run(["ruff", "check", "--fix", "."], check=True)  # noqa: S603


{% if include_performance_profiling -%}
def profile():
    """Run game with performance profiling."""
    print("Running game with performance profiling...")
    import shutil
    py_spy_available = shutil.which("py-spy")
    if py_spy_available:
        subprocess.run(  # noqa: S603
            [
                "py-spy",
                "record",
                "-o",
                "profile.svg",
                "--",
                sys.executable,
                "-m",
                "{{project_name.replace('-', '_')}}.main",
            ],
            check=True,
        )
        print("Profile saved to profile.svg")
    else:
        print("py-spy not available. Install with: poetry add --group dev py-spy")


def memory_profile():
    """Run game with memory profiling."""
    print("Running game with memory profiling...")
    subprocess.run([
        "python", "-m", "memory_profiler", 
        "{{project_name.replace('-', '_')}}/main.py"
    ], check=True)
{% endif -%}


def smart_coverage():
    """Run smart coverage analysis with detailed report."""
    try:
        from scripts.coverage import SmartCoverageManager
        
        coverage_mgr = SmartCoverageManager(Path("."))
        success, report = coverage_mgr.run_coverage_with_report(strict=False)
        
        # Save report to file
        report_file = Path("coverage_report.json")
        import json
        
        with open(report_file, "w") as f:
            json.dump(report, f, indent=2)
        
        print(f"\nüìä Detailed report saved to: {report_file}")
        
        if not success:
            sys.exit(1)
            
    except ImportError:
        print("‚ùå Smart coverage system not available")
        sys.exit(1)
def coverage_trend():
    """Show coverage trend analysis."""
    try:
        from scripts.coverage import CoverageRatchet
        
        ratchet = CoverageRatchet(Path("."))
        ratchet.print_coverage_summary()
        
        trend_info = ratchet.get_coverage_trend(days=10)
        print("\nüìà Coverage Trend (last 10 runs):")
        print(f"   Status: {trend_info['trend'].title()}")
        if trend_info["trend"] != "insufficient_data":
            print(f"   Change: {trend_info['change']:+.1f}%")
            print(f"   Range: {trend_info['first_coverage']:.1f}% ‚Üí {trend_info['last_coverage']:.1f}%")
            
    except ImportError:
        print("‚ùå Smart coverage system not available")
        sys.exit(1)
def diff_coverage():
    """Check coverage for changed files only."""
    try:
        from scripts.coverage import DifferentialCoverage
        
        diff_cov = DifferentialCoverage(Path("."))
        success = diff_cov.check_new_code_coverage(min_coverage=90)
        
        if not success:
            sys.exit(1)
            
    except ImportError:
        print("‚ùå Smart coverage system not available")
        sys.exit(1)
def validate_infrastructure():
    """üèóÔ∏è Sprint 0: Validate infrastructure setup (run once at project start)."""
    from scripts.validate_infrastructure import main as validate_main
    
    validate_main()
def clean():
    """Clean build artifacts and cache files."""
    import shutil
    
    patterns = [
        "**/__pycache__",
        "**/*.pyc", 
        "**/*.pyo",
        ".pytest_cache",
        ".mypy_cache",
        ".ruff_cache",
        "htmlcov",
        "dist",
        "build",
        "*.egg-info",
        # {{project_type|title}}-specific cleanup
        "*.log",
        {% if project_type == "game-development" -%}
        "save_*.json",  # Game save files
        {% endif -%}
        "profile.svg",  # Performance profiles
        "coverage_report.json",  # Smart coverage reports
    ]
    
    root = Path(".")
    for pattern in patterns:
        for path in root.glob(pattern):
            if path.is_dir():
                shutil.rmtree(path)
                print(f"Removed directory: {path}")
            else:
                path.unlink()
                print(f"Removed file: {path}")
    
    print("üßπ Cleanup completed!")


# For Poetry script compatibility
def main():
    """Default main function."""
    run()
