"""Coverage analysis for changed files only."""

import subprocess
from pathlib import Path
from typing import Set, List


class DifferentialCoverage:
    """Enforce high coverage only on modified files."""

    def __init__(self, project_root: Path):
        self.project_root = project_root

    def get_git_status(self) -> bool:
        """Check if we're in a git repository."""
        try:
            result = subprocess.run(
                ["git", "status"], capture_output=True, text=True, cwd=self.project_root
            )
            return result.returncode == 0
        except (subprocess.SubprocessError, FileNotFoundError):
            return False

    def get_changed_files(self) -> Set[str]:
        """Get list of Python files changed since last commit."""
        if not self.get_git_status():
            print("📝 Not a git repository, skipping differential coverage")
            return set()

        changed_files = set()

        # Try different strategies to find changed files
        strategies = [
            # Staged changes
            ["git", "diff", "--cached", "--name-only"],
            # Working directory changes
            ["git", "diff", "--name-only"],
            # Changes since last commit
            ["git", "diff", "--name-only", "HEAD^", "HEAD"],
            # Changes since main/master branch
            ["git", "diff", "--name-only", "origin/main", "HEAD"],
            ["git", "diff", "--name-only", "origin/master", "HEAD"],
        ]

        for strategy in strategies:
            try:
                result = subprocess.run(
                    strategy, capture_output=True, text=True, cwd=self.project_root
                )

                if result.returncode == 0 and result.stdout.strip():
                    files = result.stdout.strip().split("\n")
                    python_files = {
                        f for f in files if f.endswith(".py") and f.startswith("src/")
                    }
                    if python_files:
                        changed_files.update(python_files)
                        break

            except (subprocess.SubprocessError, FileNotFoundError):
                continue

        return changed_files

    def check_new_code_coverage(self, min_coverage: int = 90) -> bool:
        """Ensure new/modified code has high coverage."""
        changed_files = self.get_changed_files()

        if not changed_files:
            print("✅ No Python files changed, skipping differential coverage")
            return True

        print(
            f"🎯 Checking differential coverage for {len(changed_files)} changed files..."
        )
        for file in sorted(changed_files):
            print(f"   📄 {file}")

        # Check if changed files have corresponding tests
        missing_tests = self._check_test_coverage_for_files(changed_files)
        if missing_tests:
            print("⚠️  Files without corresponding tests:")
            for file in missing_tests:
                print(f"   📄 {file}")
            print("💡 Consider adding tests for better coverage")

        # Run coverage on specific files if they exist
        existing_files = [
            f for f in changed_files if Path(self.project_root / f).exists()
        ]

        if not existing_files:
            print("✅ No existing changed files to check coverage for")
            return True

        # Create module paths for coverage
        modules = []
        for file_path in existing_files:
            # Convert src/package/module.py to package.module
            if file_path.startswith("src/"):
                module_path = file_path[4:]  # Remove 'src/'
                if module_path.endswith(".py"):
                    module_path = module_path[:-3]  # Remove '.py'
                module_path = module_path.replace("/", ".")
                modules.append(module_path)

        if not modules:
            return True

        cmd = [
            "poetry",
            "run",
            "pytest",
            f"--cov={','.join(modules)}",
            f"--cov-fail-under={min_coverage}",
            "--cov-report=term-missing",
            "--quiet",
        ]

        print(f"🔍 Running coverage check (≥{min_coverage}%) on changed files...")
        result = subprocess.run(
            cmd, capture_output=True, text=True, cwd=self.project_root
        )

        if result.returncode == 0:
            print(
                f"✅ Differential coverage passed: {min_coverage}%+ achieved for new code"
            )
            return True
        else:
            print(f"❌ Differential coverage failed: New code below {min_coverage}%")
            print("📋 Changed files that need better testing:")
            for file in existing_files:
                print(f"   📄 {file}")
            print(f"💡 New/modified code should have {min_coverage}%+ test coverage")
            return False

    def _check_test_coverage_for_files(self, changed_files: Set[str]) -> List[str]:
        """Check if changed files have corresponding test files."""
        missing_tests = []

        for file_path in changed_files:
            if file_path.startswith("src/"):
                # Convert src/package/module.py to tests/unit/test_module.py
                relative_path = file_path[4:]  # Remove 'src/'
                if relative_path.endswith(".py"):
                    module_name = Path(relative_path).stem
                    test_patterns = [
                        f"tests/unit/test_{module_name}.py",
                        f"tests/integration/test_{module_name}.py",
                        f"tests/test_{module_name}.py",
                    ]

                    has_test = any(
                        Path(self.project_root / pattern).exists()
                        for pattern in test_patterns
                    )

                    if not has_test:
                        missing_tests.append(file_path)

        return missing_tests
