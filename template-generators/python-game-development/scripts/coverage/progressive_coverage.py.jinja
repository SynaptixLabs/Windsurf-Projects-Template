"""Smart coverage management based on project phase."""

import re
import subprocess
from pathlib import Path


class ProgressiveCoverage:
    """Manages coverage requirements based on project maturity."""

    SPRINT_THRESHOLDS = {
        0: 50,  # Infrastructure sprint
        1: 65,  # Core logic implementation
        2: 75,  # Feature completion
        3: 85,  # Production readiness
        4: 90,  # Optimization & polish
    }

    def __init__(self, project_root: Path):
        self.project_root = project_root
        self.state_file = project_root / "docs" / "state.md"

    def get_current_sprint(self) -> int:
        """Parse current sprint from state.md."""
        if not self.state_file.exists():
            return 0

        try:
            content = self.state_file.read_text(encoding="utf-8")

            # Look for sprint indicators in the state file
            sprint_patterns = [
                r"Sprint (\d+).*(?:COMPLETE|✅)",  # Completed sprints
                r"Sprint (\d+).*(?:Starting|🔄|In Progress)",  # Current sprint
                r"Sprint (\d+)",  # Any sprint mention
            ]

            max_sprint = 0
            current_sprint = 0

            for line in content.split("\n"):
                for pattern in sprint_patterns:
                    match = re.search(pattern, line, re.IGNORECASE)
                    if match:
                        sprint_num = int(match.group(1))
                        max_sprint = max(max_sprint, sprint_num)

                        # If line indicates completion, this sprint is done
                        if "COMPLETE" in line or "✅" in line:
                            current_sprint = max(current_sprint, sprint_num + 1)
                        elif any(
                            word in line.upper()
                            for word in ["STARTING", "🔄", "IN PROGRESS"]
                        ):
                            current_sprint = max(current_sprint, sprint_num)

            # If no current sprint found, use the max sprint found
            return current_sprint if current_sprint > 0 else max_sprint

        except Exception as e:
            print(f"⚠️  Warning: Could not parse sprint from state.md: {e}")
            return 0

    def get_required_coverage(self) -> int:
        """Get coverage requirement for current sprint."""
        sprint = self.get_current_sprint()
        threshold = self.SPRINT_THRESHOLDS.get(sprint, 85)

        print(f"📊 Current Sprint: {sprint}, Required Coverage: {threshold}%")
        return threshold

    def run_coverage_check(self) -> bool:
        """Run pytest with dynamic coverage threshold."""
        required = self.get_required_coverage()

        cmd = [
            "poetry",
            "run",
            "pytest",
            "--cov=src/{{ project_name | replace('-', '_') }}",
            f"--cov-fail-under={required}",
            "--cov-report=term-missing",
            "--cov-report=html:htmlcov",
            "--cov-report=json:coverage.json",
        ]

        print(f"🎯 Running progressive coverage check (≥{required}%)...")
        result = subprocess.run(cmd, capture_output=True, text=True)

        if result.returncode == 0:
            print(f"✅ Progressive coverage passed: {required}% threshold met")
            return True
        else:
            print(f"❌ Progressive coverage failed: {required}% threshold not met")
            # Don't print full output, just summary
            lines = result.stdout.split("\n")
            for line in lines:
                if "TOTAL" in line or "Coverage" in line or "FAIL" in line:
                    print(f"   {line}")
            return False
