"""Ensure coverage never decreases (ratcheting mechanism)."""

import json
import subprocess
from pathlib import Path
from typing import Optional, Dict, Any
from datetime import datetime


class CoverageRatchet:
    """Prevent coverage from decreasing over time."""

    def __init__(self, project_root: Path):
        self.project_root = project_root
        self.history_file = project_root / ".coverage_history.json"

    def get_current_coverage(self) -> Dict[str, float]:
        """Extract coverage metrics from pytest output."""
        cmd = [
            "poetry",
            "run",
            "pytest",
            "--cov=src/{{ project_name | replace('-', '_') }}",
            "--cov-report=json:coverage.json",
            "--quiet",
        ]

        try:
            subprocess.run(cmd, capture_output=True, cwd=self.project_root, text=True)

            coverage_file = self.project_root / "coverage.json"
            if coverage_file.exists():
                try:
                    with open(coverage_file, "r") as f:
                        data = json.load(f)

                    metrics = {
                        "total_coverage": data["totals"]["percent_covered"],
                        "statements": data["totals"]["num_statements"],
                        "missing": data["totals"]["missing_lines"],
                        "branches": data["totals"].get("num_branches", 0),
                        "partial_branches": data["totals"].get(
                            "num_partial_branches", 0
                        ),
                    }

                    return metrics

                except (json.JSONDecodeError, KeyError) as e:
                    print(f"⚠️  Warning: Could not parse coverage data: {e}")
                    # Try to get coverage from basic pytest output
                    return self._fallback_coverage_calculation()

                finally:
                    # Clean up coverage file
                    if coverage_file.exists():
                        coverage_file.unlink()
            else:
                print("⚠️  Warning: Coverage JSON file not generated")
                return self._fallback_coverage_calculation()

        except subprocess.CalledProcessError as e:
            print(f"⚠️  Warning: Coverage calculation failed: {e}")
            return self._fallback_coverage_calculation()

        return {"total_coverage": 0.0}

    def _fallback_coverage_calculation(self) -> Dict[str, float]:
        """Fallback coverage calculation using basic pytest."""
        try:
            cmd = [
                "poetry",
                "run",
                "pytest",
                "--cov=src/{{ project_name | replace('-', '_') }}",
                "--cov-report=term",
                "--quiet",
            ]

            result = subprocess.run(
                cmd, capture_output=True, cwd=self.project_root, text=True
            )

            # Parse coverage from terminal output
            for line in result.stdout.split("\n"):
                if "TOTAL" in line:
                    parts = line.split()
                    for i, part in enumerate(parts):
                        if part.endswith("%"):
                            try:
                                coverage_pct = float(part.rstrip("%"))
                                return {
                                    "total_coverage": coverage_pct,
                                    "statements": 0,
                                    "missing": 0,
                                }
                            except ValueError:
                                continue

        except Exception as e:
            print(f"⚠️  Warning: Fallback coverage calculation failed: {e}")

        return {"total_coverage": 0.0}

    def get_coverage_history(self) -> Dict[str, Any]:
        """Get the coverage history from file."""
        if not self.history_file.exists():
            return {"entries": []}

        try:
            with open(self.history_file, "r") as f:
                return json.load(f)
        except (json.JSONDecodeError, FileNotFoundError):
            return {"entries": []}

    def get_previous_coverage(self) -> Optional[Dict[str, float]]:
        """Get the last recorded coverage metrics."""
        history = self.get_coverage_history()
        entries = history.get("entries", [])

        if not entries:
            return None

        return entries[-1].get("metrics", {})

    def update_coverage_history(self, current_metrics: Dict[str, float]):
        """Record current coverage for future comparisons."""
        history = self.get_coverage_history()

        entry = {"timestamp": datetime.now().isoformat(), "metrics": current_metrics}

        history.setdefault("entries", []).append(entry)

        # Keep only last 50 entries to prevent file from growing too large
        if len(history["entries"]) > 50:
            history["entries"] = history["entries"][-50:]

        try:
            with open(self.history_file, "w") as f:
                json.dump(history, f, indent=2)
        except Exception as e:
            print(f"⚠️  Warning: Could not save coverage history: {e}")

    def check_coverage_ratchet(self, tolerance: float = 2.0) -> bool:
        """Ensure coverage hasn't decreased significantly."""
        current_metrics = self.get_current_coverage()
        current_coverage = current_metrics.get("total_coverage", 0.0)

        previous_metrics = self.get_previous_coverage()

        if previous_metrics is None:
            print(f"📊 Initial coverage baseline: {current_coverage:.1f}%")
            self.update_coverage_history(current_metrics)
            return True

        previous_coverage = previous_metrics.get("total_coverage", 0.0)
        coverage_change = current_coverage - previous_coverage

        # Update history regardless of result
        self.update_coverage_history(current_metrics)

        if coverage_change >= -tolerance:
            if coverage_change > 0:
                print(
                    f"📈 Coverage improved: {current_coverage:.1f}% (+{coverage_change:.1f}%)"
                )
            elif coverage_change == 0:
                print(f"📊 Coverage maintained: {current_coverage:.1f}%")
            else:
                print(
                    f"📊 Coverage slightly decreased: {current_coverage:.1f}% ({coverage_change:+.1f}%) - within tolerance"
                )
            return True
        else:
            print(
                f"📉 Coverage decreased significantly: {current_coverage:.1f}% ({coverage_change:+.1f}%)"
            )
            print(f"   Previous: {previous_coverage:.1f}%")
            print(
                f"   Decrease of {abs(coverage_change):.1f}% exceeds tolerance ({tolerance}%)"
            )

            # Show some guidance
            print("💡 To fix coverage regression:")
            print("   1. Add tests for new/modified code")
            print("   2. Review recently changed files")
            print("   3. Check if tests were accidentally removed")

            return False

    def get_coverage_trend(self, days: int = 7) -> Dict[str, Any]:
        """Get coverage trend over the specified number of days."""
        history = self.get_coverage_history()
        entries = history.get("entries", [])

        if len(entries) < 2:
            return {
                "trend": "insufficient_data",
                "message": "Need more coverage history to determine trend",
            }

        # Get recent entries (last N entries as proxy for days)
        recent_entries = entries[-min(days, len(entries)) :]

        if len(recent_entries) < 2:
            return {
                "trend": "insufficient_data",
                "message": "Need more recent coverage data",
            }

        first_coverage = recent_entries[0]["metrics"].get("total_coverage", 0.0)
        last_coverage = recent_entries[-1]["metrics"].get("total_coverage", 0.0)

        change = last_coverage - first_coverage

        if change > 1.0:
            trend = "improving"
        elif change < -1.0:
            trend = "declining"
        else:
            trend = "stable"

        return {
            "trend": trend,
            "change": change,
            "first_coverage": first_coverage,
            "last_coverage": last_coverage,
            "entries_analyzed": len(recent_entries),
        }

    def print_coverage_summary(self):
        """Print a summary of current coverage status."""
        current_metrics = self.get_current_coverage()
        current_coverage = current_metrics.get("total_coverage", 0.0)

        trend_info = self.get_coverage_trend()

        print("📊 Coverage Summary:")
        print(f"   Current: {current_coverage:.1f}%")
        print(f"   Statements: {current_metrics.get('statements', 0)}")
        print(f"   Missing: {current_metrics.get('missing', 0)}")

        if trend_info["trend"] != "insufficient_data":
            trend_emoji = {"improving": "📈", "declining": "📉", "stable": "📊"}
            emoji = trend_emoji.get(trend_info["trend"], "📊")
            print(
                f"   Trend: {emoji} {trend_info['trend'].title()} ({trend_info['change']:+.1f}%)"
            )
