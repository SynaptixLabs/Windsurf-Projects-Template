[tool.pytest.ini_options]
# Pytest configuration for {{project_name}}

# Test discovery
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Minimum Python version
minversion = "6.0"

# Add current directory to Python path
addopts = [
    "--strict-markers",
    "--strict-config", 
    "--verbose",
    "--tb=short",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=85",
    "--durations=10",
]

# Test markers
markers = [
    "unit: Unit tests for individual components",
    "integration: Integration tests for system interactions", 
    "visual: Visual regression tests for UI components",
    "performance: Performance and benchmarking tests",
    "ai: AI behavior and strategy tests",
    "gameplay: End-to-end gameplay scenario tests",
    "slow: Tests that take a long time to run",
    "network: Tests that require network access",
]

# Warnings configuration
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Logging configuration  
log_level = "INFO"
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py", 
    "*/__pycache__/*",
    "*/site-packages/*",
    "*/build/*",
    "*/dist/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"
