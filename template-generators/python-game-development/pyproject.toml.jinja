[tool.poetry]
name = "{{project_name}}"
version = "0.1.0"
description = "{{project_description}}"
authors = ["{{author_name}} <{{author_email}}>"]
license = "MIT"
readme = "README.md"
packages = [{include = "{{project_name.replace('-', '_')}}", from = "src"}]

[tool.poetry.dependencies]
python = "^{{python_version}}"
{% if game_framework == "pygame" -%}
pygame = "^2.5.0"
{% elif game_framework == "arcade" -%}
arcade = "^2.6.0"
{% elif game_framework == "pyglet" -%}
pyglet = "^2.0.0"
{% endif -%}
{% if include_config_management -%}
pydantic = "^2.5.0"
pydantic-settings = "^2.1.0"
{% endif -%}
{% if include_logging -%}
structlog = "^23.2.0"
rich = "^13.7.0"
{% endif -%}
typer = {extras = ["all"], version = "^0.12.0"}

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^8.0.0"
{% if testing_level in ["standard", "comprehensive"] -%}
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
{% endif -%}
{% if testing_level == "comprehensive" -%}
pytest-benchmark = "^4.0.0"
hypothesis = "^6.92.0"
pytest-xdist = "^3.5.0"
{% endif -%}

# Code Quality - Modern 2025 Stack (Ruff-only)
ruff = "^0.1.11"         # Universal linter + formatter (replaces Black, isort, flake8)
mypy = "^1.8.0"
pre-commit = "^3.6.0"

{% if documentation_level in ["standard", "comprehensive"] -%}
# Documentation
sphinx = "^7.2.0"
{% if documentation_level == "comprehensive" -%}
sphinx-autoapi = "^3.0.0"
sphinx-rtd-theme = "^2.0.0"
myst-parser = "^2.0.0"
{% endif -%}
{% endif -%}

{% if include_performance_profiling -%}
# Performance Profiling
py-spy = "^0.3.14"
memory-profiler = "^0.61.0"
{% endif -%}

[tool.poetry.scripts]
# FIXED: Scripts pointing to actual Python functions
{{project_name.replace('-', '_')}} = "{{project_name.replace('-', '_')}}.main:main"
run = "scripts.cli:run"
dev = "scripts.cli:dev"
lint = "scripts.cli:lint"
test = "scripts.cli:test"
ci = "scripts.cli:ci"
format = "scripts.cli:format_code"
clean = "scripts.cli:clean"
# Sprint Demo Commands
demo = "scripts.cli:demo"
demo-auto = "scripts.cli:demo_auto"
demo-record = "scripts.cli:demo_record"
sprint-status = "scripts.cli:sprint_status"
# Infrastructure & Smart Coverage Commands
validate-infrastructure = "scripts.cli:validate_infrastructure"
smart-coverage = "scripts.cli:smart_coverage"
coverage-trend = "scripts.cli:coverage_trend"
diff-coverage = "scripts.cli:diff_coverage"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Ruff Configuration (2025 Modern Stack - No Black needed)
[tool.ruff]
target-version = "py{{python_version.replace('.', '')}}"
line-length = 88
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # Pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "S",   # bandit (security)
    "PTH", # pathlib
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501",  # Line too long (handled by formatter)
    "S101",  # Use of assert (OK in tests)
    "D",     # pydocstyle (we'll add docs later)
    "ANN",   # flake8-annotations (we'll add gradually)
    "COM812", # Trailing comma conflicts with formatter
    "ISC001", # Single line implicit string concatenation conflicts with formatter
]

[tool.ruff.lint.per-file-ignores]
"scripts/*" = ["S603", "S607"]  # Allow subprocess usage in utility scripts
"tests/*" = ["S101", "S311", "S106"]  # Allow assert, random, and hardcoded passwords in tests
"**/conftest.py" = ["RUF013"]   # Allow implicit Optional in test fixtures

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false

[tool.mypy]
python_version = "{{python_version}}"
strict = true
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true
exclude = [
    "build/",
    "dist/",
    "scripts/",  # CLI scripts don't need strict typing
]

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
{% if testing_level in ["standard", "comprehensive"] -%}
    "--cov=src/{{project_name.replace('-', '_')}}",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=60",  # Start with 60% for Sprint 0 - increase to 85% in Sprint 1
{% endif -%}
{% if testing_level == "comprehensive" -%}
    # "-n auto",  # Parallel test execution (disabled for Sprint 0 - enable after Sprint 1)
{% endif -%}
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
{% if include_performance_profiling -%}
    "benchmark: marks tests as performance benchmarks",
{% endif -%}
]

{% if testing_level == "comprehensive" -%}
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "scripts/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]
precision = 2
show_missing = true
{% endif -%}
