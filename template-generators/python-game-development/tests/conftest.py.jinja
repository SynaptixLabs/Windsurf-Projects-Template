"""Test configuration and fixtures for {{project_name}}."""

import pytest
from typing import Generator, Any
from unittest.mock import Mock, MagicMock

# Import game components for testing
from {{project_name.replace('-', '_')}}.config.game_settings import GameSettings
from {{project_name.replace('-', '_')}}.core.constants import GameState, PlayerType


# === Basic Fixtures ===

@pytest.fixture
def game_settings() -> GameSettings:
    """Provide default game settings for testing."""
    return GameSettings()


@pytest.fixture
def test_settings() -> GameSettings:
    """Provide test-specific game settings."""
    return GameSettings(
        window_width=400,
        window_height=300,
        fps=30,
        debug_mode=True,
        show_fps=True,
    )


# === Mock Fixtures ===

@pytest.fixture
def mock_pygame():
    """Mock pygame for testing without actual pygame dependency."""
    pygame_mock = MagicMock()
    
    # Mock common pygame modules
    pygame_mock.init.return_value = None
    pygame_mock.quit.return_value = None
    pygame_mock.display.set_mode.return_value = MagicMock()
    pygame_mock.time.Clock.return_value = MagicMock()
    pygame_mock.event.get.return_value = []
    
    # Mock Surface
    surface_mock = MagicMock()
    surface_mock.fill.return_value = None
    surface_mock.blit.return_value = None
    pygame_mock.Surface.return_value = surface_mock
    
    return pygame_mock


@pytest.fixture
def mock_screen():
    """Mock game screen/display for testing."""
    screen_mock = MagicMock()
    screen_mock.get_size.return_value = (800, 600)
    screen_mock.fill.return_value = None
    screen_mock.blit.return_value = None
    return screen_mock


@pytest.fixture
def mock_clock():
    """Mock game clock for testing."""
    clock_mock = MagicMock()
    clock_mock.tick.return_value = 16.67  # ~60 FPS
    clock_mock.get_fps.return_value = 60.0
    return clock_mock


# === Game State Fixtures ===

@pytest.fixture
def sample_game_state():
    """Provide a sample game state for testing."""
    return {
        "state": GameState.PLAYING,
        "current_player": PlayerType.HUMAN,
        "moves_made": 0,
        "game_result": None,
    }


# === File and Data Fixtures ===

@pytest.fixture
def temp_save_file(tmp_path):
    """Provide a temporary file path for save/load testing."""
    return tmp_path / "test_save.json"


@pytest.fixture
def sample_game_data():
    """Provide sample game data for testing save/load functionality."""
    return {
        "game_name": "Test Game",
        "timestamp": "2025-06-16T10:00:00",
        "current_player": 1,
        "moves": [],
        "settings": {
            "difficulty": "medium",
            "sound_enabled": True
        }
    }


# === Performance Testing Fixtures ===

@pytest.fixture
def performance_tracker():
    """Provide a performance tracking utility for tests."""
    class PerformanceTracker:
        def __init__(self):
            self.measurements = []
        
        def start_timer(self):
            import time
            self.start_time = time.perf_counter()
        
        def end_timer(self, operation_name: str):
            import time
            end_time = time.perf_counter()
            duration = end_time - self.start_time
            self.measurements.append({
                "operation": operation_name,
                "duration": duration
            })
            return duration
        
        def get_average_duration(self, operation_name: str) -> float:
            durations = [
                m["duration"] for m in self.measurements
                if m["operation"] == operation_name
            ]
            return sum(durations) / len(durations) if durations else 0.0
    
    return PerformanceTracker()


# === Test Data Generators ===

@pytest.fixture
def mock_game_data_generator():
    """Provide a utility to generate test game data."""
    def generate_game_data(seed: int = 42, **overrides):
        """Generate consistent test game data."""
        import random
        random.seed(seed)
        
        base_data = {
            "player_count": random.randint(1, 4),
            "difficulty": random.choice(["easy", "medium", "hard"]),
            "score": random.randint(0, 1000),
            "level": random.randint(1, 10),
            "time_played": random.randint(60, 3600),  # 1 minute to 1 hour
        }
        
        # Apply any overrides
        base_data.update(overrides)
        return base_data
    
    return generate_game_data


# === Cleanup Fixtures ===

@pytest.fixture(autouse=True)
def cleanup_after_test():
    """Automatically cleanup after each test."""
    yield
    # Cleanup code here if needed
    # For example, reset any global state
    pass


# === Integration Test Fixtures ===

@pytest.fixture
def game_engine_mock():
    """Mock game engine for integration testing."""
    engine_mock = MagicMock()
    engine_mock.is_running = True
    engine_mock.current_state = GameState.MENU
    engine_mock.fps = 60
    return engine_mock


# === Parameterized Test Data ===

@pytest.fixture(params=[
    (800, 600),   # Standard HD
    (1024, 768),  # XGA
    (1920, 1080), # Full HD
    (400, 300),   # Small test window
])
def window_sizes(request):
    """Provide different window sizes for parameterized tests."""
    width, height = request.param
    return {
        "width": width,
        "height": height,
    }


@pytest.fixture(params=[PlayerType.HUMAN, PlayerType.AI])
def player_types(request):
    """Provide different player types for parameterized tests."""
    return request.param


@pytest.fixture(params=[30, 60, 120])
def fps_values(request):
    """Provide different FPS values for testing."""
    return request.param
