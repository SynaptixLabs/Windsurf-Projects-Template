"""Test configuration and fixtures for {{project_name}}."""

import pytest
from typing import Generator, Any
from unittest.mock import Mock, MagicMock

# Import game components for testing
from {{project_name.replace('-', '_')}}.config.game_settings import GameSettings
from {{project_name.replace('-', '_')}}.core.constants import GameState, PlayerType, PieceType


# === Pytest Configuration ===

def pytest_configure(config):
    """Configure pytest with custom markers."""
    config.addinivalue_line(
        "markers", "unit: Unit tests for individual components"
    )
    config.addinivalue_line(
        "markers", "integration: Integration tests for system interactions"
    )
    config.addinivalue_line(
        "markers", "visual: Visual regression tests for UI components"
    )
    config.addinivalue_line(
        "markers", "performance: Performance and benchmarking tests"
    )
    config.addinivalue_line(
        "markers", "ai: AI behavior and strategy tests"
    )
    config.addinivalue_line(
        "markers", "gameplay: End-to-end gameplay scenario tests"
    )


# === Basic Fixtures ===

@pytest.fixture
def game_settings() -> GameSettings:
    """Provide default game settings for testing."""
    return GameSettings()


@pytest.fixture
def test_settings() -> GameSettings:
    """Provide test-specific game settings."""
    return GameSettings(
        window_width=400,
        window_height=300,
        fps=30,
        board_width=4,
        board_height=4,
        connect_length=3,
        debug_mode=True,
        show_fps=True,
    )


# === Mock Fixtures ===

@pytest.fixture
def mock_pygame():
    """Mock pygame for testing without actual pygame dependency."""
    pygame_mock = MagicMock()
    
    # Mock common pygame modules
    pygame_mock.init.return_value = None
    pygame_mock.quit.return_value = None
    pygame_mock.display.set_mode.return_value = MagicMock()
    pygame_mock.time.Clock.return_value = MagicMock()
    pygame_mock.event.get.return_value = []
    
    # Mock Surface
    surface_mock = MagicMock()
    surface_mock.fill.return_value = None
    surface_mock.blit.return_value = None
    pygame_mock.Surface.return_value = surface_mock
    
    return pygame_mock


@pytest.fixture
def mock_screen():
    """Mock game screen/display for testing."""
    screen_mock = MagicMock()
    screen_mock.get_size.return_value = (800, 600)
    screen_mock.fill.return_value = None
    screen_mock.blit.return_value = None
    return screen_mock


@pytest.fixture
def mock_clock():
    """Mock game clock for testing."""
    clock_mock = MagicMock()
    clock_mock.tick.return_value = 16.67  # ~60 FPS
    clock_mock.get_fps.return_value = 60.0
    return clock_mock


# === Game State Fixtures ===

@pytest.fixture
def empty_board():
    """Provide an empty game board for testing."""
    return tuple(
        tuple(PieceType.EMPTY for _ in range(7))
        for _ in range(6)
    )


@pytest.fixture
def test_board_4x4():
    """Provide a small 4x4 board for testing."""
    return tuple(
        tuple(PieceType.EMPTY for _ in range(4))
        for _ in range(4)
    )


@pytest.fixture
def sample_game_state():
    """Provide a sample game state for testing."""
    return {
        "state": GameState.PLAYING,
        "current_player": PlayerType.HUMAN,
        "board": empty_board(),
        "moves_made": 0,
        "game_result": None,
    }


# === File and Data Fixtures ===

@pytest.fixture
def temp_save_file(tmp_path):
    """Provide a temporary file path for save/load testing."""
    return tmp_path / "test_save.json"


@pytest.fixture
def sample_game_data():
    """Provide sample game data for testing save/load functionality."""
    return {
        "game_name": "Test Game",
        "timestamp": "2025-06-16T10:00:00",
        "board_state": [
            [0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 1, 0, 0, 0],
            [0, 0, 0, 2, 0, 0, 0],
            [0, 0, 0, 1, 0, 0, 0],
        ],
        "current_player": 1,
        "moves": ["3", "3", "3"],
    }


# === Performance Testing Fixtures ===

@pytest.fixture
def performance_tracker():
    """Provide a performance tracking utility for tests."""
    class PerformanceTracker:
        def __init__(self):
            self.measurements = []
        
        def start_timer(self):
            import time
            self.start_time = time.perf_counter()
        
        def end_timer(self, operation_name: str):
            import time
            end_time = time.perf_counter()
            duration = end_time - self.start_time
            self.measurements.append({
                "operation": operation_name,
                "duration": duration
            })
            return duration
        
        def get_average_duration(self, operation_name: str) -> float:
            durations = [
                m["duration"] for m in self.measurements
                if m["operation"] == operation_name
            ]
            return sum(durations) / len(durations) if durations else 0.0
    
    return PerformanceTracker()


# === Test Data Generators ===

@pytest.fixture
def board_generator():
    """Provide a utility to generate test board states."""
    def generate_board(width: int = 7, height: int = 6, pieces: list = None):
        """Generate a board with optional pre-placed pieces."""
        board = [
            [PieceType.EMPTY for _ in range(width)]
            for _ in range(height)
        ]
        
        if pieces:
            for row, col, piece_type in pieces:
                if 0 <= row < height and 0 <= col < width:
                    board[row][col] = piece_type
        
        return tuple(tuple(row) for row in board)
    
    return generate_board


# === Cleanup Fixtures ===

@pytest.fixture(autouse=True)
def cleanup_after_test():
    """Automatically cleanup after each test."""
    yield
    # Cleanup code here if needed
    # For example, reset any global state
    pass


# === Integration Test Fixtures ===

@pytest.fixture
def game_engine_mock():
    """Mock game engine for integration testing."""
    engine_mock = MagicMock()
    engine_mock.is_running = True
    engine_mock.current_state = GameState.MENU
    engine_mock.fps = 60
    return engine_mock


# === Parameterized Test Data ===

@pytest.fixture(params=[
    (7, 6, 4),  # Standard Connect Four
    (6, 5, 4),  # Smaller variant
    (8, 7, 4),  # Larger variant
    (5, 4, 3),  # Mini variant
])
def board_configurations(request):
    """Provide different board configurations for parameterized tests."""
    width, height, connect_length = request.param
    return {
        "width": width,
        "height": height,
        "connect_length": connect_length,
    }


@pytest.fixture(params=[PlayerType.HUMAN, PlayerType.AI])
def player_types(request):
    """Provide different player types for parameterized tests."""
    return request.param
