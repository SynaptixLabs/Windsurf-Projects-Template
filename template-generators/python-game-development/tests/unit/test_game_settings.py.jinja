"""Test configuration and settings functionality."""

import pytest
from pydantic import ValidationError

from {{project_name.replace('-', '_')}}.config.game_settings import GameSettings, load_game_settings


class TestGameSettings:
    """Test game settings configuration."""
    
    def test_default_settings(self):
        """Test that default settings are valid."""
        settings = GameSettings()
        
        assert settings.game_title == "{{project_description}}"
        assert settings.window_width == 800
        assert settings.window_height == 600
        assert settings.fps == 60
        assert settings.fullscreen is False
    
    def test_window_size_property(self):
        """Test window_size property returns correct tuple."""
        settings = GameSettings(window_width=1024, window_height=768)
        assert settings.window_size == (1024, 768)
    
    def test_volume_validation(self):
        """Test that volume settings are validated."""
        # Valid volumes
        settings = GameSettings(sound_volume=0.5, music_volume=1.0)
        assert settings.sound_volume == 0.5
        assert settings.music_volume == 1.0
        
        # Invalid volumes should raise validation error
        with pytest.raises(ValidationError):
            GameSettings(sound_volume=1.5)
            
        with pytest.raises(ValidationError):
            GameSettings(music_volume=-0.1)
    
    def test_load_game_settings(self):
        """Test that load_game_settings returns valid GameSettings instance."""
        settings = load_game_settings()
        assert isinstance(settings, GameSettings)
        assert settings.game_title == "{{project_description}}"
    
    def test_color_tuples(self):
        """Test that color settings are proper RGB tuples."""
        settings = GameSettings()
        
        # Check all colors are valid RGB tuples
        assert len(settings.background_color) == 3
        assert all(0 <= c <= 255 for c in settings.background_color)
        
        assert len(settings.primary_color) == 3
        assert all(0 <= c <= 255 for c in settings.primary_color)
        
        assert len(settings.secondary_color) == 3
        assert all(0 <= c <= 255 for c in settings.secondary_color)
        
        assert len(settings.highlight_color) == 3
        assert all(0 <= c <= 255 for c in settings.highlight_color)
    
    def test_audio_settings(self):
        """Test audio configuration settings."""
        settings = GameSettings()
        
        assert isinstance(settings.enable_sound, bool)
        assert isinstance(settings.enable_music, bool)
        assert 0.0 <= settings.sound_volume <= 1.0
        assert 0.0 <= settings.music_volume <= 1.0
    
    def test_ai_settings(self):
        """Test AI configuration settings."""
        settings = GameSettings()
        
        assert isinstance(settings.ai_enabled, bool)
        assert settings.ai_difficulty in ["easy", "medium", "hard", "expert"]
        assert settings.ai_think_time > 0
    
    def test_debug_settings(self):
        """Test development/debug settings."""
        settings = GameSettings()
        
        assert isinstance(settings.debug_mode, bool)
        assert isinstance(settings.show_fps, bool)
        assert settings.log_level in ["DEBUG", "INFO", "WARNING", "ERROR"]


class TestSettingsIntegration:
    """Test settings integration and edge cases."""
    
    def test_settings_immutability(self):
        """Test that settings handle updates properly."""
        settings1 = GameSettings(fps=30)
        settings2 = GameSettings(fps=60)
        
        assert settings1.fps == 30
        assert settings2.fps == 60
    
    def test_custom_configuration(self):
        """Test creating settings with custom values."""
        custom_settings = GameSettings(
            window_width=1920,
            window_height=1080,
            fps=120,
            fullscreen=True,
            sound_volume=0.8,
            music_volume=0.6,
            ai_difficulty="hard",
            debug_mode=True
        )
        
        assert custom_settings.window_size == (1920, 1080)
        assert custom_settings.fps == 120
        assert custom_settings.fullscreen is True
        assert custom_settings.sound_volume == 0.8
        assert custom_settings.music_volume == 0.6
        assert custom_settings.ai_difficulty == "hard"
        assert custom_settings.debug_mode is True
    
    def test_settings_validation_edge_cases(self):
        """Test settings validation for edge cases."""
        # Test minimum/maximum valid values
        settings = GameSettings(
            window_width=1,
            window_height=1,
            fps=1,
            sound_volume=0.0,
            music_volume=1.0,
            ai_think_time=0.1
        )
        
        assert settings.window_width == 1
        assert settings.window_height == 1
        assert settings.fps == 1
        assert settings.sound_volume == 0.0
        assert settings.music_volume == 1.0
        assert settings.ai_think_time == 0.1
