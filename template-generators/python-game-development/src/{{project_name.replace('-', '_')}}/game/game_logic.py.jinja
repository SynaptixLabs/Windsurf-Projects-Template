"""Generic game logic base classes for {{project_name}}.

This module provides flexible base classes that can be adapted for various game types:
- Board games (chess, checkers, tic-tac-toe, connect-4, etc.)
- Action games (platformers, shooters, etc.)
- Puzzle games (tetris, match-3, etc.)
- RPG games (turn-based, real-time)

Customize the classes below to implement your specific game mechanics.
"""

from abc import ABC, abstractmethod
from dataclasses import dataclass
from typing import Any, Dict, List, Optional, Protocol, Union
from {{ project_name | replace('-', '_') }}.core.constants import GameResult, GameState as GameStateEnum


class GameAction(Protocol):
    """Protocol for game actions (moves, inputs, etc.)."""
    
    def is_valid(self) -> bool:
        """Check if this action is valid in the current context."""
        ...
    
    def execute(self, game_state: "GameLogicState") -> "GameLogicState":
        """Execute this action and return the new game state."""
        ...


@dataclass
class GameLogicState:
    """
    Generic game state that can be customized for any game type.
    
    This base implementation provides common functionality.
    Extend this class to add game-specific state data.
    """
    
    current_state: GameStateEnum = GameStateEnum.MENU
    current_player: int = 1
    turn_count: int = 0
    score: Dict[int, int] = None
    game_data: Dict[str, Any] = None
    
    def __post_init__(self):
        """Initialize default values."""
        if self.score is None:
            self.score = {}
        if self.game_data is None:
            self.game_data = {}
    
    def is_game_active(self) -> bool:
        """Check if the game is in an active playing state."""
        return self.current_state == GameStateEnum.PLAYING
    
    def switch_player(self) -> None:
        """Switch to the next player (override for multi-player games)."""
        # Default implementation for 2-player games
        self.current_player = 2 if self.current_player == 1 else 1
        self.turn_count += 1
    
    def reset(self) -> None:
        """Reset game state to initial values."""
        self.current_state = GameStateEnum.MENU
        self.current_player = 1
        self.turn_count = 0
        self.score.clear()
        self.game_data.clear()


class GameLogic(ABC):
    """
    Abstract base class for game logic.
    
    Implement the abstract methods to define your specific game rules.
    """
    
    def __init__(self):
        """Initialize game logic."""
        self.game_state = GameLogicState()
    
    @abstractmethod
    def is_valid_action(self, action: GameAction) -> bool:
        """Check if the given action is valid in the current game state."""
        pass
    
    @abstractmethod
    def apply_action(self, action: GameAction) -> bool:
        """
        Apply the action to the game state.
        
        Returns:
            True if the action was applied successfully, False otherwise.
        """
        pass
    
    @abstractmethod
    def get_valid_actions(self) -> List[GameAction]:
        """Get all valid actions for the current game state."""
        pass
    
    @abstractmethod
    def check_game_end(self) -> GameResult:
        """Check if the game has ended and return the result."""
        pass
    
    def start_new_game(self) -> None:
        """Start a new game."""
        self.game_state.reset()
        self.game_state.current_state = GameStateEnum.PLAYING
    
    def pause_game(self) -> None:
        """Pause the current game."""
        if self.game_state.is_game_active():
            self.game_state.current_state = GameStateEnum.PAUSED
    
    def resume_game(self) -> None:
        """Resume a paused game."""
        if self.game_state.current_state == GameStateEnum.PAUSED:
            self.game_state.current_state = GameStateEnum.PLAYING
    
    def end_game(self) -> None:
        """End the current game."""
        self.game_state.current_state = GameStateEnum.GAME_OVER


# === Example Implementations ===

class SimpleAction:
    """Example action implementation."""
    
    def __init__(self, action_type: str, data: Any = None):
        self.action_type = action_type
        self.data = data
    
    def is_valid(self) -> bool:
        """Basic validation - customize for your game."""
        return self.action_type is not None
    
    def execute(self, game_state: GameLogicState) -> GameLogicState:
        """Basic execution - customize for your game."""
        # TODO: Implement action execution logic
        return game_state


class ExampleGameLogic(GameLogic):
    """
    Example game logic implementation.
    
    Replace this with your actual game logic.
    """
    
    def is_valid_action(self, action: GameAction) -> bool:
        """Example validation - customize for your game."""
        if not self.game_state.is_game_active():
            return False
        return action.is_valid()
    
    def apply_action(self, action: GameAction) -> bool:
        """Example action application - customize for your game."""
        if not self.is_valid_action(action):
            return False
        
        # Apply the action
        self.game_state = action.execute(self.game_state)
        
        # Check for game end conditions
        result = self.check_game_end()
        if result != GameResult.ONGOING:
            self.end_game()
        else:
            # Switch to next player if game continues
            self.game_state.switch_player()
        
        return True
    
    def get_valid_actions(self) -> List[GameAction]:
        """Example valid actions - customize for your game."""
        if not self.game_state.is_game_active():
            return []
        
        # TODO: Generate valid actions based on current game state
        return []
    
    def check_game_end(self) -> GameResult:
        """Example game end check - customize for your game."""
        # TODO: Implement your win/lose/draw conditions
        return GameResult.ONGOING


# === Specialized Base Classes ===

class BoardGameLogic(GameLogic):
    """
    Base class for board-based games (chess, checkers, tic-tac-toe, etc.).
    
    Extend this for grid-based games with discrete positions.
    """
    
    def __init__(self, board_width: int = 8, board_height: int = 8):
        super().__init__()
        self.board_width = board_width
        self.board_height = board_height
        self.board: List[List[Any]] = [[None for _ in range(board_width)] 
                                      for _ in range(board_height)]
    
    def get_cell(self, x: int, y: int) -> Any:
        """Get the value at board position (x, y)."""
        if 0 <= x < self.board_width and 0 <= y < self.board_height:
            return self.board[y][x]
        return None
    
    def set_cell(self, x: int, y: int, value: Any) -> bool:
        """Set the value at board position (x, y)."""
        if 0 <= x < self.board_width and 0 <= y < self.board_height:
            self.board[y][x] = value
            return True
        return False
    
    def is_position_valid(self, x: int, y: int) -> bool:
        """Check if the position is within board bounds."""
        return 0 <= x < self.board_width and 0 <= y < self.board_height
    
    def reset_board(self) -> None:
        """Clear the board."""
        self.board = [[None for _ in range(self.board_width)] 
                      for _ in range(self.board_height)]


class RealTimeGameLogic(GameLogic):
    """
    Base class for real-time games (action games, shooters, etc.).
    
    Extend this for games that update continuously based on time.
    """
    
    def __init__(self):
        super().__init__()
        self.entities: List[Any] = []
        self.time_scale: float = 1.0
    
    def update(self, dt: float) -> None:
        """Update game logic for real-time games."""
        if not self.game_state.is_game_active():
            return
        
        # Update all entities
        for entity in self.entities:
            if hasattr(entity, 'update'):
                entity.update(dt * self.time_scale)
        
        # Check for collisions, events, etc.
        self.process_game_events(dt)
    
    def process_game_events(self, dt: float) -> None:
        """Process time-based game events."""
        # TODO: Implement collision detection, spawning, etc.
        pass
    
    def add_entity(self, entity: Any) -> None:
        """Add an entity to the game."""
        self.entities.append(entity)
    
    def remove_entity(self, entity: Any) -> None:
        """Remove an entity from the game."""
        if entity in self.entities:
            self.entities.remove(entity)


# TODO: Choose and customize the appropriate base class for your game:
# - Use GameLogic for simple turn-based games
# - Use BoardGameLogic for grid-based games  
# - Use RealTimeGameLogic for continuous action games
# - Create your own subclass for unique game types

__all__ = [
    "GameAction",
    "GameLogicState", 
    "GameLogic",
    "SimpleAction",
    "ExampleGameLogic",
    "BoardGameLogic",
    "RealTimeGameLogic",
]
