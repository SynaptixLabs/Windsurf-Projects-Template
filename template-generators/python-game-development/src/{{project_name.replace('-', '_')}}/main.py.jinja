#!/usr/bin/env python3
"""
{{project_name}} - Main Entry Point

{% if has_project_spec and project_requirements_text -%}
Project Requirements:
{{project_requirements_text}}
{% else -%}
{{project_description}}

A Python {{game_framework}} game built with modern development practices.
This is a clean, generic starting point for game development.
{% endif -%}
"""

import sys
import logging
from typing import Optional

{% if game_framework == "pygame" -%}
try:
    import pygame
except ImportError:
    print("‚ùå pygame is not installed. Install it with: poetry add pygame")
    print("üí° Or run: poetry install  (if already in pyproject.toml)")
    sys.exit(1)
{% elif game_framework == "arcade" -%}
try:
    import arcade
except ImportError:
    print("‚ùå arcade is not installed. Install it with: poetry add arcade")
    print("üí° Or run: poetry install  (if already in pyproject.toml)")
    sys.exit(1)
{% elif game_framework == "pyglet" -%}
try:
    import pyglet
except ImportError:
    print("‚ùå pyglet is not installed. Install it with: poetry add pyglet")
    print("üí° Or run: poetry install  (if already in pyproject.toml)")
    sys.exit(1)
{% endif -%}

from {{ project_name | replace('-', '_') }}.core.game_engine import GameEngine
from {{ project_name | replace('-', '_') }}.game.game_logic import ExampleGameLogic
from {{ project_name | replace('-', '_') }}.config.game_settings import settings


def setup_logging() -> None:
    """Configure logging for the application."""
    logging.basicConfig(
        level=getattr(logging, settings.log_level.upper()),
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(),
            logging.FileHandler('logs/{{project_name}}.log')
        ]
    )


def create_game_logic() -> Optional[ExampleGameLogic]:
    """
    Create and configure game logic.
    
    TODO: Replace ExampleGameLogic with your actual game implementation.
    
    Returns:
        Configured game logic instance
    """
    try:
        # TODO: Initialize your specific game logic here
        # Examples:
        # - For board games: return TicTacToeLogic() or ChessLogic()
        # - For action games: return PlatformerLogic() or ShooterLogic()
        # - For puzzle games: return TetrisLogic() or Match3Logic()
        
        game_logic = ExampleGameLogic()
        return game_logic
        
    except Exception as e:
        logging.error(f"Failed to create game logic: {e}")
        return None


def main() -> int:
    """
    Main entry point for {{project_name}}.
    
    Creates and runs the game instance.
    
    Returns:
        Exit code: 0 for success, non-zero for error
    """
    print(f"üöÄ Starting {settings.game_title}...")
    
    # Setup logging
    setup_logging()
    logger = logging.getLogger(__name__)
    
    try:
        # Create game engine
        engine = GameEngine(settings)
        logger.info("Game engine initialized")
        
        # Create game logic
        game_logic = create_game_logic()
        if not game_logic:
            print("‚ùå Failed to initialize game logic")
            return 1
        
        # Set up the game
        engine.set_game_logic(game_logic)
        logger.info("Game logic configured")
        
        # Run the game
        logger.info("Starting game loop")
        result = engine.run()
        
        logger.info(f"Game ended with result: {result}")
        return result
        
    except KeyboardInterrupt:
        print(f"\n‚ö†Ô∏è {settings.game_title} interrupted by user")
        logger.info("Game interrupted by user")
        return 0
    except Exception as e:
        print(f"‚ùå Error running {settings.game_title}: {e}")
        logger.error(f"Game error: {e}", exc_info=True)
        return 1
    finally:
        # Cleanup
        {% if game_framework == 'pygame' -%}
        pygame.quit()
        {% endif -%}
        print(f"üëã Thanks for playing {settings.game_title}!")


if __name__ == "__main__":
    sys.exit(main())
