#!/usr/bin/env python3
"""
{{project_name}} - Main Entry Point

{% if has_project_spec and project_requirements_text -%}
Project Requirements:
{{project_requirements_text}}
{% else -%}
A Python {{game_framework}} game built with modern development practices.

TODO: Implement your specific game logic based on your requirements.
{% endif -%}
"""

import sys
import logging
from pathlib import Path
from typing import Optional

{% if game_framework == "pygame" -%}
try:
    import pygame
except ImportError:
    print("pygame is not installed. Install it with: poetry add pygame")
    sys.exit(1)
{% elif game_framework == "arcade" -%}
try:
    import arcade
except ImportError:
    print("arcade is not installed. Install it with: poetry add arcade")
    sys.exit(1)
{% elif game_framework == "pyglet" -%}
try:
    import pyglet
except ImportError:
    print("pyglet is not installed. Install it with: poetry add pyglet")
    sys.exit(1)
{% endif -%}

from {{project_name.replace('-', '_')}}.core.game_engine import GameEngine
from {{project_name.replace('-', '_')}}.core.config import GameConfig
{% if include_logging -%}
from {{project_name.replace('-', '_')}}.utils.logging_setup import setup_logging
{% endif -%}


def main() -> int:
    """
    Main entry point for {{project_name}}.
    
    Returns:
        Exit code: 0 for success, non-zero for error
    """
    try:
        {% if include_logging -%}
        # Setup logging
        setup_logging()
        logger = logging.getLogger(__name__)
        logger.info("Starting {{project_name}}")
        {% endif -%}
        
        # Load configuration
        config = GameConfig()
        
        {% if game_framework == "pygame" -%}
        # Initialize pygame
        pygame.init()
        logger.info("Pygame initialized successfully") if include_logging else None
        {% endif -%}
        
        # Create and run game engine
        engine = GameEngine(config)
        result = engine.run()
        
        {% if include_logging -%}
        logger.info("Game finished successfully")
        {% endif -%}
        return result
        
    except KeyboardInterrupt:
        print("\n{{project_name}} interrupted by user")
        return 0
    except Exception as e:
        {% if include_logging -%}
        logger.error(f"Game error: {e}", exc_info=True)
        {% endif -%}
        print(f"Error running {{project_name}}: {e}")
        return 1
    finally:
        {% if game_framework == "pygame" -%}
        # Cleanup pygame
        pygame.quit()
        {% endif -%}


if __name__ == "__main__":
    sys.exit(main())
