"""Game settings and configuration management."""

from pathlib import Path
from typing import Any, Tuple

from pydantic import Field
from pydantic_settings import BaseSettings, SettingsConfigDict


class GameSettings(BaseSettings):
    """Game configuration settings loaded from environment and config files."""
    
    model_config = SettingsConfigDict(
        env_file=".env",
        env_file_encoding="utf-8", 
        extra="ignore"
    )
    
    # === Game Configuration ===
    game_title: str = "{{project_description}}"
    window_width: int = Field(default=800, description="Game window width in pixels")
    window_height: int = Field(default=600, description="Game window height in pixels") 
    fps: int = Field(default=60, description="Target frames per second")
    fullscreen: bool = Field(default=False, description="Start in fullscreen mode")
    
    # === Visual Configuration ===
    background_color: Tuple[int, int, int] = (32, 32, 32)  # Dark gray
    primary_color: Tuple[int, int, int] = (64, 128, 255)  # Blue
    secondary_color: Tuple[int, int, int] = (128, 128, 128)  # Gray
    highlight_color: Tuple[int, int, int] = (255, 255, 255)  # White
    
    # === Audio Configuration ===
    enable_sound: bool = Field(default=True, description="Enable sound effects")
    enable_music: bool = Field(default=True, description="Enable background music")
    sound_volume: float = Field(default=0.7, ge=0.0, le=1.0, description="Sound effects volume")
    music_volume: float = Field(default=0.5, ge=0.0, le=1.0, description="Background music volume")
    
    # === AI Configuration ===
    ai_enabled: bool = Field(default=True, description="Enable AI opponent")
    ai_difficulty: str = Field(default="medium", description="AI difficulty level")
    ai_think_time: float = Field(default=1.0, description="AI thinking time in seconds")
    
    # === Development Configuration ===
    debug_mode: bool = Field(default=False, description="Enable debug features")
    show_fps: bool = Field(default=False, description="Display FPS counter")
    log_level: str = Field(default="INFO", description="Logging level")
    
    @property
    def window_size(self) -> Tuple[int, int]:
        """Get window size as tuple."""
        return (self.window_width, self.window_height)


def load_game_settings() -> GameSettings:
    """Load and return game settings."""
    return GameSettings()


# Global settings instance
settings = load_game_settings()
