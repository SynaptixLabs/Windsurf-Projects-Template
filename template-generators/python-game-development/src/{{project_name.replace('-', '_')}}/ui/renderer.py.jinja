"""Rendering system for the game using {{game_framework}}."""

{% if game_framework == 'pygame' -%}
import pygame
{% endif -%}
from typing import Optional
from {{ project_name | replace('-', '_') }}.config.game_settings import GameSettings


class Renderer:
    """
    Handles all rendering operations for the game.

    Manages:
    - Screen initialization and management
    - Drawing operations and coordination
    - Frame presentation
    """

    def __init__(self, config: GameSettings):
        """
        Initialize the renderer with game configuration.

        Args:
            config: Game settings containing display configuration
        """
        self.config = config
        {% if game_framework == 'pygame' -%}
        self.screen: Optional[pygame.Surface] = None
        {% else -%}
        self.screen: Optional[object] = None  # Framework-specific surface type
        {% endif -%}
        self._initialize_display()

    def _initialize_display(self) -> None:
        """Initialize game display."""
        {% if game_framework == 'pygame' -%}
        pygame.init()
        self.screen = pygame.display.set_mode(self.config.window_size)
        pygame.display.set_caption(self.config.game_title)
        {% else -%}
        # Initialize display for {{game_framework}}
        # TODO: Implement framework-specific initialization
        pass
        {% endif %}

    def clear(self) -> None:
        """Clear the screen with the background color."""
        {% if game_framework == 'pygame' -%}
        if self.screen:
            self.screen.fill(self.config.background_color)
        {% else -%}
        # Clear screen for {{game_framework}}
        # TODO: Implement framework-specific screen clearing
        pass
        {% endif %}

    def present(self) -> None:
        """Present the current frame (handled by game engine with display flip)."""
        # This is called by the game engine, but we don't call flip here
        # to avoid double-flipping. The game engine calls the display flip function
        pass

    def get_screen(self) -> Optional[{% if game_framework == 'pygame' %}pygame.Surface{% else %}object{% endif %}]:
        """
        Get the game screen surface.

        Returns:
            The screen surface, or None if not initialized
        """
        return self.screen

    def shutdown(self) -> None:
        """Clean shutdown of the renderer."""
        {% if game_framework == 'pygame' -%}
        pygame.quit()
        {% else -%}
        # Clean shutdown for {{game_framework}}
        # TODO: Implement framework-specific cleanup
        pass
        {% endif %}
