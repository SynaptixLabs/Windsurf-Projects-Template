"""
Game Engine - Core Infrastructure

This module provides the foundational game engine infrastructure.
Implement your specific game logic by extending or modifying this base.

{% if has_project_spec and project_requirements_text -%}
Project Requirements:
{{project_requirements_text}}

TODO: Implement the above requirements in the appropriate methods below.
{% else -%}
TODO: Define your specific game requirements and implement them here.
{% endif -%}
"""

import logging
from typing import Optional, Protocol
{% if game_framework == "pygame" -%}
import pygame
from pygame import Surface, Rect
{% elif game_framework == "arcade" -%}
import arcade
{% elif game_framework == "pyglet" -%}
import pyglet
{% endif -%}

from {{project_name.replace('-', '_')}}.config.game_settings import GameSettings
from {{project_name.replace('-', '_')}}.game.game_state import GameState
from {{project_name.replace('-', '_')}}.ui.renderer import Renderer


logger = logging.getLogger(__name__)


class GameLogic(Protocol):
    """Protocol defining the interface for game-specific logic."""
    
    def update(self, dt: float, game_state: GameState) -> None:
        """Update game logic for one frame."""
        ...
    
    def handle_input(self, events: list, game_state: GameState) -> None:
        """Handle input events."""
        ...
    
    def is_game_over(self, game_state: GameState) -> bool:
        """Check if the game is over."""
        ...


class GameEngine:
    """
    Core game engine handling the main game loop.
    
    This provides the infrastructure for:
    - Game loop management
    - Frame rate control
    - Input handling coordination
    - Rendering coordination
    - State management
    
    Extend or modify this class to implement your specific game.
    """
    
    def __init__(self, config: GameSettings):
        """Initialize the game engine."""
        self.config = config
        self.running = False
        self.clock = None
        {% if game_framework == "pygame" -%}
        self.clock = pygame.time.Clock()
        {% endif -%}
        
        # Initialize core components
        self.game_state = GameState()
        self.renderer = Renderer(config)
        
        # TODO: Initialize your specific game logic here
        self.game_logic: Optional[GameLogic] = None
        logger.info("Game engine initialized")
    
    def run(self) -> int:
        """
        Main game loop.
        
        Returns:
            Exit code: 0 for success, non-zero for error
        """
        logger.info("Starting game loop")
        self.running = True
        
        {% if game_framework == "pygame" -%}
        try:
            while self.running:
                # Calculate delta time
                dt = self.clock.tick(self.config.target_fps) / 1000.0
                
                # Handle events
                events = pygame.event.get()
                self.handle_events(events)
                
                # Update game state
                self.update(dt)
                
                # Render frame
                self.render()
                
                # Update display
                pygame.display.flip()
                
        except Exception as e:
            logger.error(f"Game loop error: {e}")
            return 1
            
        {% elif game_framework == "arcade" -%}
        # TODO: Implement arcade game loop
        # See: https://api.arcade.academy/en/latest/
        logger.warning("Arcade game loop not implemented yet")
        
        {% elif game_framework == "pyglet" -%}
        # TODO: Implement pyglet game loop  
        # See: https://pyglet.readthedocs.io/
        logger.warning("Pyglet game loop not implemented yet")
        
        {% else -%}
        # TODO: Implement custom game loop for your framework
        logger.warning("Custom game loop not implemented yet")
        {% endif -%}
        
        logger.info("Game loop finished")
        return 0
    
    def handle_events(self, events: list) -> None:
        """Handle input events."""
        {% if game_framework == "pygame" -%}
        for event in events:
            if event.type == pygame.QUIT:
                self.running = False
            # TODO: Add your specific event handling here
        {% endif -%}
        
        # Delegate to game-specific logic
        if self.game_logic:
            self.game_logic.handle_input(events, self.game_state)
    
    def update(self, dt: float) -> None:
        """Update game state for one frame."""
        # Update core systems
        self.game_state.update(dt)
        
        # TODO: Add your core game updates here
        
        # Delegate to game-specific logic
        if self.game_logic:
            self.game_logic.update(dt, self.game_state)
            
            # Check for game over conditions
            if self.game_logic.is_game_over(self.game_state):
                self.handle_game_over()
    
    def render(self) -> None:
        """Render the current frame."""
        self.renderer.clear()
        
        # TODO: Add your rendering calls here
        # Example:
        # self.renderer.draw_background()
        # self.renderer.draw_game_objects(self.game_state.objects)
        # self.renderer.draw_ui(self.game_state.ui_elements)
        
        self.renderer.present()
    
    def handle_game_over(self) -> None:
        """Handle game over state."""
        logger.info("Game over")
        # TODO: Implement game over logic
        # - Show game over screen
        # - Save scores
        # - Offer restart option
        # - etc.
        pass
    
    def shutdown(self) -> None:
        """Clean shutdown of the game engine."""
        logger.info("Shutting down game engine")
        self.running = False
        
        # TODO: Add any cleanup code here
        # - Save game state
        # - Release resources
        # - etc.


# TODO: Implement your specific game logic class
class YourGameLogic:
    """
    Implement your specific game logic here.
    
    This should implement the GameLogic protocol above.
    """
    
    def update(self, dt: float, game_state: GameState) -> None:
        """Update your game logic."""
        # TODO: Implement your game's update logic
        pass
    
    def handle_input(self, events: list, game_state: GameState) -> None:
        """Handle your game's input."""
        # TODO: Implement your game's input handling
        pass
    
    def is_game_over(self, game_state: GameState) -> bool:
        """Check if your game is over."""
        # TODO: Implement your game over conditions
        return False
